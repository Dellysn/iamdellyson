{
  "posts": [
    {
      "reward": { "type": "xlm" },
      "sourcedFromGithub": false,
      "isAnonymous": false,
      "views": 18,
      "slugOverridden": false,
      "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1631875687737/omxya5G5u.png",
      "autoGeneratedCover": "",
      "brief": "source\n\nReact.js so far\nThe Hard Truth\nThe Journey to becoming a Frontend Developer\nWhat‚Äôs up with Reactjs and why Reactjs?\nWhat's the point?\n\n\n\nIt‚Äôs been a couple of years since I started coding officially, at least. I have always been attracted to ...",
      "content": "<p><img src=\"https://www.yazseyit.com/static/16e43c9cbeaf71595fdb366833bd6f8a/143cd/banner.png\" alt=\"React Image\" />\n<a target=\"_blank\" href=\"www.yazseyit.com\">source</a></p>\n<ul>\n<li><a class=\"post-section-overview\" href=\"#reactjs-so-far\">React.js so far</a><ul>\n<li><a class=\"post-section-overview\" href=\"#the-hard-truth\">The Hard Truth</a></li>\n<li><a class=\"post-section-overview\" href=\"#the-journey-to-becoming-a-frontend-developer\">The Journey to becoming a Frontend Developer</a></li>\n<li><a class=\"post-section-overview\" href=\"#whats-up-with-reactjs-and-why-reactjs\">What‚Äôs up with Reactjs and why Reactjs?</a></li>\n<li><a class=\"post-section-overview\" href=\"#whats-the-point\">What's the point?</a></li>\n</ul>\n</li>\n</ul>\n<p>It‚Äôs been a couple of years since I started coding officially, at least. I have always been attracted to the backend side, digging and roughing it with <code>Node.js</code> and some of its framework, I never really worked on any realistic project, no clients either. This may be as a result of my impostor syndrome, or something I am not so sure that I know about. I have attempted to work on startups with my friends, but I ended up giving an excuse or the project just fold up and died a natural death.</p>\n<h2 id=\"the-hard-truth\">The Hard Truth</h2>\n<p><img src=\"https://media.giphy.com/media/l1AvAA2defJoJOvao/giphy.gif?cid=ecf05e4705xrxjsgy8yr3bvg455fbww7qd7cjerncwdd0i95&amp;rid=giphy.gif&amp;ct=g\" alt=\"The Hard Truth GIF\" /></p>\n<p>Even though I really love the logics that goes on the backend, no doubt the Frontend has been fascinating to me all along, the aestheticism that goes on the Frontend all has me hooked up. It's just that my ego won‚Äôt let me. I picked up some <code>React.js</code> learning resources and later dropped them because I don‚Äôt ‚Äúlike‚Äù <code>React.js</code> it was so cumbersome I would say at the time, then I switched back to learning an alternative <code>Svelte.js</code>. A frontend framework that can be used to ‚ÄúCybernetically enhanced web apps‚Äù according to <a target=\"_blank\" href=\"https://twitter.com/rich_harris\">Harris</a>.</p>\n<h2 id=\"the-journey-to-becoming-a-frontend-developer\">The Journey to becoming a Frontend Developer</h2>\n<p><img src=\"https://media.giphy.com/media/gLiyt8QwcHA5ZvLwaF/giphy.gif?cid=ecf05e47m5gqbhe0ns2nic1cl3ueg4nu7lisypr2thz2uzsg&amp;rid=giphy.gif&amp;ct=g\" alt=\"Let's Begin GIF\" /></p>\n<p>Shortly after picking up one or two YouTube tutorials on <code>Svelte.js</code>. I was already building some practice projects with this interesting framework, then boom  I got a call from a long-time friend asking he would like me to work on a project,  a landing page of a business. At the time I had decided not to continue with just HTML and CSS, I wanted to be able to modularize my code and reuse it whenever I want, <code>Svelte</code> just like <code>React.js</code> provides that out of the box.  I had initially built some websites <code>Svelte.js</code>. I wasn‚Äôt satisfied with the delivery at the time because SvelteJS has no officially recommended routing options like <code>react-router</code> is to ReactJS, I always opted for a library like <a target=\"_blank\" href=\"https://visionmedia.github.io/page.js/\">Page.js</a>, and <a target=\"_blank\" href=\"https://madewithsvelte.com/tinro\">Tinro</a> for routing in <code>Svelte.JS</code>, and trust me it's been the best option so far, for me at least. Thank goodness for <a target=\"_blank\" href=\"https://kit.svelte.dev/\">SvelteKit</a> although, I am yet to try it out, I have a good feeling about it.</p>\n<h2 id=\"whats-up-with-reactjs-and-why-reactjs\">What‚Äôs up with Reactjs and why Reactjs?</h2>\n<p>Well, thank me for asking me these questions, one would think that after this wonderful adventure with <code>Svelte</code>. I should be comfortable using it in any other projects that I am going to be executing, but the reality is that even though I never really liked <code>React.js</code> for some personal reasons, LOL. I am just kidding, but the fact is I never really had any time dedicated to learning ReactJS, but I love JavaScript.</p>\n<p>On a hot afternoon, representing my favorite club in the EA FIFA game, thrashing my opponents by some huge margin.</p>\n<p><img src=\"https://media.giphy.com/media/lQUEFitwSVrBsOecjn/giphy.gif\" alt=\"FIFA\" /></p>\n<p> I received a call from my mentor ‚Äúagain‚Äù, this time he wanted me to work on a <code>React.js</code> project, a landing page for an App. Remember, I had no solid knowledge of <code>React</code> prior, the only concept I am familiar with was how to create a component, the idea of <code>props</code> in <strong>React</strong> was strange, and it was difficult to think about at the time. I had no choice but to say yes as I love to learn and why not?.</p>\n<p> Taking on that project has been a life-changing adventure for me because it serves as a boost to my progress which had also landed me some various gigs that I can confidently add to my portfolio. The interesting part is that I learned on the job, not wasting time and days watching ‚Äúuseful tutorials‚Äù on YouTube and/or any tutorial websites out there. What has helped me was the fact that whenever I run into issues or there is any bug in my code, I referred back to Google, read some blog posts to help me get some ideas on how to fix the said issues, and at this point, I can confidently say that I am in love with <strong>React</strong>? In fact, I am having a second thought about going back to Svelte because of the following reasons:</p>\n<ul>\n<li><p>The <a target=\"_blank\" href=\"https://dev.to/t/react\">React.js Community</a> is massive.</p>\n</li>\n<li><p>There are lots of resources out there to guide you in your learning.</p>\n</li>\n</ul>\n<h2 id=\"whats-the-point\">What's the point?</h2>\n<p>This post is out of excitement, the way I feel about my progress right now and I just feel like letting my readers know what being a Software Developer is to me and understand that the journey so far has been a rough one, and they should understand that you can anything learning even on the job. I am unemployed, and I am currently not searching, as I am taking my time out to face my studies.</p>\n<p>Au revoir et paix. ü§û</p>\n",
      "contentMarkdown": "![React Image](https://www.yazseyit.com/static/16e43c9cbeaf71595fdb366833bd6f8a/143cd/banner.png)\n[source](www.yazseyit.com)\n\n- [React.js so far](#reactjs-so-far)\n  - [The Hard Truth](#the-hard-truth)\n  - [The Journey to becoming a Frontend Developer](#the-journey-to-becoming-a-frontend-developer)\n  - [What‚Äôs up with Reactjs and why Reactjs?](#whats-up-with-reactjs-and-why-reactjs)\n  - [What's the point?](#whats-the-point)\n\nIt‚Äôs been a couple of years since I started coding officially, at least. I have always been attracted to the backend side, digging and roughing it with `Node.js` and some of its framework, I never really worked on any realistic project, no clients either. This may be as a result of my impostor syndrome, or something I am not so sure that I know about. I have attempted to work on startups with my friends, but I ended up giving an excuse or the project just fold up and died a natural death.\n\n## The Hard Truth\n\n![The Hard Truth GIF](https://media.giphy.com/media/l1AvAA2defJoJOvao/giphy.gif?cid=ecf05e4705xrxjsgy8yr3bvg455fbww7qd7cjerncwdd0i95&rid=giphy.gif&ct=g)\n\nEven though I really love the logics that goes on the backend, no doubt the Frontend has been fascinating to me all along, the aestheticism that goes on the Frontend all has me hooked up. It's just that my ego won‚Äôt let me. I picked up some `React.js` learning resources and later dropped them because I don‚Äôt ‚Äúlike‚Äù `React.js` it was so cumbersome I would say at the time, then I switched back to learning an alternative `Svelte.js`. A frontend framework that can be used to ‚ÄúCybernetically enhanced web apps‚Äù according to [Harris](https://twitter.com/rich_harris).\n\n## The Journey to becoming a Frontend Developer  \n\n![Let's Begin GIF](https://media.giphy.com/media/gLiyt8QwcHA5ZvLwaF/giphy.gif?cid=ecf05e47m5gqbhe0ns2nic1cl3ueg4nu7lisypr2thz2uzsg&rid=giphy.gif&ct=g)\n\nShortly after picking up one or two YouTube tutorials on `Svelte.js`. I was already building some practice projects with this interesting framework, then boom  I got a call from a long-time friend asking he would like me to work on a project,  a landing page of a business. At the time I had decided not to continue with just HTML and CSS, I wanted to be able to modularize my code and reuse it whenever I want, `Svelte` just like `React.js` provides that out of the box.  I had initially built some websites `Svelte.js`. I wasn‚Äôt satisfied with the delivery at the time because SvelteJS has no officially recommended routing options like `react-router` is to ReactJS, I always opted for a library like [Page.js](https://visionmedia.github.io/page.js/), and [Tinro](https://madewithsvelte.com/tinro) for routing in `Svelte.JS`, and trust me it's been the best option so far, for me at least. Thank goodness for [SvelteKit](https://kit.svelte.dev/) although, I am yet to try it out, I have a good feeling about it.\n\n## What‚Äôs up with Reactjs and why Reactjs?\n\nWell, thank me for asking me these questions, one would think that after this wonderful adventure with `Svelte`. I should be comfortable using it in any other projects that I am going to be executing, but the reality is that even though I never really liked `React.js` for some personal reasons, LOL. I am just kidding, but the fact is I never really had any time dedicated to learning ReactJS, but I love JavaScript.\n\nOn a hot afternoon, representing my favorite club in the EA FIFA game, thrashing my opponents by some huge margin.\n\n![FIFA](https://media.giphy.com/media/lQUEFitwSVrBsOecjn/giphy.gif)\n\n I received a call from my mentor ‚Äúagain‚Äù, this time he wanted me to work on a `React.js` project, a landing page for an App. Remember, I had no solid knowledge of `React` prior, the only concept I am familiar with was how to create a component, the idea of `props` in **React** was strange, and it was difficult to think about at the time. I had no choice but to say yes as I love to learn and why not?.\n\n Taking on that project has been a life-changing adventure for me because it serves as a boost to my progress which had also landed me some various gigs that I can confidently add to my portfolio. The interesting part is that I learned on the job, not wasting time and days watching ‚Äúuseful tutorials‚Äù on YouTube and/or any tutorial websites out there. What has helped me was the fact that whenever I run into issues or there is any bug in my code, I referred back to Google, read some blog posts to help me get some ideas on how to fix the said issues, and at this point, I can confidently say that I am in love with **React**? In fact, I am having a second thought about going back to Svelte because of the following reasons:\n\n- The [React.js Community](https://dev.to/t/react) is massive.\n\n- There are lots of resources out there to guide you in your learning.\n\n## What's the point?\n\nThis post is out of excitement, the way I feel about my progress right now and I just feel like letting my readers know what being a Software Developer is to me and understand that the journey so far has been a rough one, and they should understand that you can anything learning even on the job. I am unemployed, and I am currently not searching, as I am taking my time out to face my studies.\n\nAu revoir et paix. ü§û\n",
      "hasPolls": false,
      "totalPollVotes": 0,
      "upvotes": 0,
      "downvotes": 0,
      "tags": [
        "56744723958ef13879b95434",
        "583d0951f533d193a2e694d1",
        "56a399f292921b8f79d3633c"
      ],
      "untaggedFrom": [
        "56744723958ef13879b95434",
        "583d0951f533d193a2e694d1",
        "56a399f292921b8f79d3633c"
      ],
      "upvotedBy": [],
      "downvotedBy": [],
      "popularity": 4952.5491,
      "responses": [],
      "responseCount": 0,
      "replyCount": 0,
      "followers": [],
      "isActive": true,
      "isFeatured": false,
      "isEngaging": false,
      "answeredByTarget": false,
      "inviters": [],
      "isDelisted": true,
      "isNotified": false,
      "duplicatePosts": [],
      "numCollapsed": 0,
      "hasReward": false,
      "bookmarkedIn": [],
      "similarPostIds": [],
      "reactions": [],
      "totalReactions": 0,
      "reactionsByCurrentUser": [],
      "isPinnedToBlog": false,
      "disableComments": true,
      "commentsPaused": false,
      "hasLatex": false,
      "syncAlgolia": false,
      "enableToc": false,
      "toc": [],
      "numUniqueUsersWhoReacted": 0,
      "_id": "614473472d0e2479882a41d2",
      "title": "ReactJS so far",
      "subtitle": "A short story of my transition to the Front-End",
      "type": "story",
      "ogImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1631876248049/3cI-DRsnj.png",
      "metaTitle": "",
      "metaDescription": "",
      "isRepublished": false,
      "originalArticleURL": "",
      "partOfPublication": true,
      "publication": "5ee6c51f6c513725202e9e0e",
      "slug": "reactjs-so-far",
      "importedFromMedium": false,
      "dateAdded": "2021-09-17T10:51:51.184Z",
      "hasCustomDate": false,
      "stickCoverToBottom": false,
      "pollOptions": [],
      "badges": [],
      "questionReplies": [],
      "contributors": [],
      "cuid": "ckto8s7rn0gpx08s1563je7xb",
      "author": "5ee6c4e36c513725202e9e05",
      "followersCount": 1,
      "draft": "6143498adbe60379639b00a3",
      "hasPinnedTag": false,
      "readTime": 4,
      "__v": 0,
      "series": null,
      "dateUpdated": "2021-09-17T10:57:41.770Z",
      "pendingPublicationApproval": false,
      "viewsUpdatedOn": 1643205607514,
      "uniqueReactions": [],
      "reactionToCountMapUnique": { "any": 1 },
      "id": "614473472d0e2479882a41d2"
    },
    {
      "reward": { "type": "xlm" },
      "sourcedFromGithub": false,
      "isAnonymous": false,
      "views": 37,
      "slugOverridden": false,
      "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1601604501993/fFlYzvqHN.jpeg",
      "autoGeneratedCover": "",
      "brief": "When creating web applications using backend frameworks like Express.js it's normal for developers to want to add views to their various projects and Hapi.js is not exempted, you can add views to your Hapi projects too in fact Hapi supports multiple ...",
      "content": "<p>When creating web applications using backend frameworks like <code>Express.js</code> it's normal for developers to want to add views to their various projects and <code>Hapi.js</code> is not exempted, you can add views to your Hapi projects too in fact Hapi supports multiple and various templating engines such as <code>Handlebars</code>(my favorite), <code>Nunjucks</code>, <code>Pug</code>, <code>EJS</code> etc.</p>\n<p>As I mentioned in my previous post, creating Views is not actually built into Hapi core functionality, we need to add a plugin for it called <code>Vision</code>.</p>\n<blockquote>\n<p>Vision is a templates rendering plugin for hapi.js. Vision decorates the server, request, and h response toolkit interfaces with additional methods for managing view engines that can be used to render templated responses. <a target=\"_blank\" href=\"https://hapi.dev/tutorials/views/?lang=en_US\">hapi</a></p>\n</blockquote>\n<p>If you are just joining us, I'd advise you to go through the previous <a target=\"_blank\" href=\"https://dellyson.hashnode.dev/introduction-to-hapijs-ckfzzde8x016dmps1g320h4ct\">post</a>.</p>\n<p>Before we can start using vision in our project we need to first install a couple of dependencies, we are going to be using <code>handlebars.js</code> as our template engine.</p>\n<pre><code>yarn <span class=\"hljs-keyword\">add</span> @hapi/vision handlebars <span class=\"hljs-comment\">--save</span>\n</code></pre><p>The command above installed the necessary dependencies we need. Now let's get our hands dirty.</p>\n<p>Firstly, we require the <code>Vision</code> dependency</p>\n<pre><code><span class=\"hljs-keyword\">const</span> Vision = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">\"@hapi/vision\"</span>)\n</code></pre><p>Then we modify our <code>server.js</code> file.</p>\n<p>Before anything else, we need to register our vision plugin</p>\n<pre><code> <span class=\"hljs-keyword\">await</span> server.register(Vision);\n</code></pre><p>or else our views won't work, we will just keep on getting errors, moreso, the Vision plugin gives us access to some API that we can use to render our template on the fly.</p>\n<p>Our project structure will change up a bit</p>\n<pre><code>Hapi_Project\n<span class=\"hljs-params\">|__node_modules\n|</span>__server.js\n<span class=\"hljs-params\">|__public\n|</span>  <span class=\"hljs-params\">|__ style.css\n|</span>  <span class=\"hljs-params\">|__ main.js\n|</span>__views\n<span class=\"hljs-params\">|  |</span>__layouts\n<span class=\"hljs-params\">|  |</span>  <span class=\"hljs-params\">|__layout.html\n|</span>  <span class=\"hljs-params\">|__partials\n|</span>  <span class=\"hljs-params\">|  |</span>__navbar.html\n<span class=\"hljs-params\">|  |</span>__index.html\n<span class=\"hljs-params\">|__ package.json</span>\n</code></pre><p>Configuring our views.</p>\n<pre><code>  <span class=\"hljs-comment\">//setting up views</span>\n  <span class=\"hljs-selector-tag\">server</span><span class=\"hljs-selector-class\">.views</span>({\n    <span class=\"hljs-attribute\">engines</span>: {\n      <span class=\"hljs-attribute\">html</span>: require(<span class=\"hljs-string\">\"handlebars\"</span>),\n    },\n    <span class=\"hljs-attribute\">relativeTo</span>: __dirname,\n    <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">\"./views\"</span>,\n    <span class=\"hljs-attribute\">partialsPath</span>: <span class=\"hljs-string\">\"./views/partials\"</span>,\n    <span class=\"hljs-attribute\">layout</span>: true,\n    <span class=\"hljs-attribute\">layoutPath</span>: <span class=\"hljs-string\">\"./views/layouts\"</span>,\n  });\n</code></pre><p>The Hapi views method takes in an object where we pass in our various configurations, now let's go through them one after the other. The <code>engines</code> property is for setting the template engine of your choice which we used <code>handlebars</code> for. The <code>relativeTo</code> indicates the directory in which we are going to be serving our templates from and that is the <code>views</code> folder. <code>partialsPath</code> indicates the directory containing the our partial files, setting <code>layout</code> to true tells vision that we indeed want to use the layout templating style which you will see in the snippet below and also we need to provide the <code>layoutPath</code> which points to the directory we are serving the <code>layout.html</code> file from and it must be named <code>layout.html</code> else we get an error.</p>\n<p>Inside the <code>layout.html</code> file, paste the following</p>\n<pre><code><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"../style.css\"</span> /&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>{{title}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    {{&gt; navbar.html}}\n    {{{content}}}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>we are going to modify the <code>/views/index.html</code> as well</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Introduction to Hapi.JS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span> A brief guide in the hapi world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><p>and also, we modify the <code>/views/partials/navbar.html</code> as well.</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"brand\"</span>&gt;</span>Hapi Project<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>about<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>service<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>contact<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span>\n</code></pre><p>The <code>HTML</code> code are limited because this is just an introductory post. Our <code>CSS</code> remains as the previous file we had from the first part of this post.</p>\n<p>We can now render our view like so.</p>\n<pre><code> <span class=\"hljs-keyword\">server</span>.route([\n    {\n      <span class=\"hljs-keyword\">method</span>: \"GET\",\n      <span class=\"hljs-type\">path</span>: \"/\",\n      <span class=\"hljs-keyword\">handler</span>: (request, h) =&gt; {\n        <span class=\"hljs-keyword\">return</span> h.<span class=\"hljs-keyword\">view</span>(\"index\");\n      },\n    },\n    // other routes\n ])\n</code></pre><p>In your browser, you can now navigate to the <code>http://localhost:3000/</code> and see a similar output as this.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1601600690265/1vU1OoKUr.png\" alt=\"static.png\" /></p>\n<h3 id=\"serving-dynamic-data\">Serving Dynamic Data</h3>\n<p>You can also pass a variable or an array of object to your views and Handlebars will parse it dynamically to the views.</p>\n<p>Let's change up our <code>server.js</code> file a bit.</p>\n<pre><code><span class=\"hljs-keyword\">server</span>.route([\n    {\n      <span class=\"hljs-keyword\">method</span>: \"GET\",\n      <span class=\"hljs-type\">path</span>: \"/\",\n      <span class=\"hljs-keyword\">handler</span>: (request, h) =&gt; {\n        // <span class=\"hljs-keyword\">Create</span> an <span class=\"hljs-keyword\">array</span> <span class=\"hljs-keyword\">of</span> objects\n        const lists = [\n          {\n            <span class=\"hljs-type\">name</span>: \"Isiaka\",\n            age: <span class=\"hljs-number\">20</span>,\n          },\n          {\n            <span class=\"hljs-type\">name</span>: \"Lukman\",\n            age: <span class=\"hljs-number\">22</span>,\n          },\n          {\n            <span class=\"hljs-type\">name</span>: \"Bamidele\",\n            age: <span class=\"hljs-number\">25</span>,\n          },\n          {\n            <span class=\"hljs-type\">name</span>: \"Dellyson\",\n            age: <span class=\"hljs-number\">28</span>,\n          },\n        ];\n        <span class=\"hljs-keyword\">return</span> h.<span class=\"hljs-keyword\">view</span>(\"index\", {\n          title: \"Home Page\",\n          lists,\n        });\n      },\n    },\n    // other routes objects\n])\n</code></pre><p>And our <code>index.html</code> file</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Introduction to Hapi.JS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>A brief guide in the hapi world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n  {{#if lists}}\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    {{#each lists}}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>{{name}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    {{/each}}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n  {{/if}}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1601767552541/yw0qw41B0.png\" alt=\"views.png\" /></p>\n<h3 id=\"putting-all-together\">Putting all together</h3>\n<pre><code><span class=\"hljs-keyword\">const</span> Hapi = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@hapi/hapi\"</span>);\n<span class=\"hljs-keyword\">const</span> Port = process.env.PORT || <span class=\"hljs-number\">3000</span>;\n<span class=\"hljs-keyword\">const</span> Inert = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@hapi/inert\"</span>);\n<span class=\"hljs-keyword\">const</span> Vision = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@hapi/vision\"</span>);\n<span class=\"hljs-keyword\">const</span> Path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);\n<span class=\"hljs-comment\">// create a server config</span>\n<span class=\"hljs-keyword\">const</span> server = Hapi.server({\n  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">\"localhost\"</span>,\n  <span class=\"hljs-attr\">port</span>: Port,\n  <span class=\"hljs-attr\">routes</span>: {\n    <span class=\"hljs-attr\">files</span>: {\n      <span class=\"hljs-attr\">relativeTo</span>: Path.join(__dirname, <span class=\"hljs-string\">\"public\"</span>),\n    },\n  },\n});\n\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">await</span> server.register(Inert);\n  <span class=\"hljs-keyword\">await</span> server.register(Vision);\n\n  <span class=\"hljs-comment\">//setting up views</span>\n  server.views({\n    <span class=\"hljs-attr\">engines</span>: {\n      <span class=\"hljs-attr\">html</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"handlebars\"</span>),\n    },\n    <span class=\"hljs-attr\">relativeTo</span>: __dirname,\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"./views\"</span>,\n    <span class=\"hljs-attr\">partialsPath</span>: <span class=\"hljs-string\">\"./views/partials\"</span>,\n    <span class=\"hljs-attr\">layout</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">layoutPath</span>: <span class=\"hljs-string\">\"./views/layouts\"</span>,\n  });\n  <span class=\"hljs-comment\">// static file route</span>\n  server.route({\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"GET\"</span>,\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/{params*}\"</span>,\n    <span class=\"hljs-attr\">handler</span>: {\n      <span class=\"hljs-attr\">directory</span>: {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\".\"</span>,\n      },\n    },\n  });\n  server.route([\n    {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"GET\"</span>,\n      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/\"</span>,\n      <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">request, h</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">return</span> h.view(<span class=\"hljs-string\">\"index\"</span>);\n      },\n    },\n\n    {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"GET\"</span>,\n      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/re\"</span>,\n      <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">request, h</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> name = request.query.name;\n        <span class=\"hljs-keyword\">const</span> age = request.query.age;\n        <span class=\"hljs-keyword\">return</span> {\n          name,\n          age,\n        };\n      },\n    },\n  ]);\n\n  <span class=\"hljs-keyword\">await</span> server.start();\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Server listening on port \"</span>, server.info.uri);\n};\nconfig();\n<span class=\"hljs-comment\">// handling unhandledRejection Error</span>\nprocess.on(<span class=\"hljs-string\">\"unhandledRejection\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(err);\n  process.exit(<span class=\"hljs-number\">1</span>);\n});\n</code></pre><h3 id=\"wrapping-up\">Wrapping up</h3>\n<p>With this brief write-up, I am sure you've got a glimpse of how to add a view to an Hapi.js project, find the link to the project repo below. See you in my next post. Peace ‚úå.</p>\n<p><a target=\"_blank\" href=\"https://github.com/Dellysn/hapi_project.git\">Repo link</a></p>\n",
      "contentMarkdown": "When creating web applications using backend frameworks like `Express.js` it's normal for developers to want to add views to their various projects and `Hapi.js` is not exempted, you can add views to your Hapi projects too in fact Hapi supports multiple and various templating engines such as `Handlebars`(my favorite), `Nunjucks`, `Pug`, `EJS` etc.\n\nAs I mentioned in my previous post, creating Views is not actually built into Hapi core functionality, we need to add a plugin for it called `Vision`.\n\n> Vision is a templates rendering plugin for hapi.js. Vision decorates the server, request, and h response toolkit interfaces with additional methods for managing view engines that can be used to render templated responses. [hapi](https://hapi.dev/tutorials/views/?lang=en_US)\n\nIf you are just joining us, I'd advise you to go through the previous [post](https://dellyson.hashnode.dev/introduction-to-hapijs-ckfzzde8x016dmps1g320h4ct).\n\nBefore we can start using vision in our project we need to first install a couple of dependencies, we are going to be using `handlebars.js` as our template engine.\n\n```\nyarn add @hapi/vision handlebars --save\n\n```\n\nThe command above installed the necessary dependencies we need. Now let's get our hands dirty.\n\nFirstly, we require the `Vision` dependency\n\n```\nconst Vision = require(\"@hapi/vision\")\n\n```\n\nThen we modify our `server.js` file.\n\nBefore anything else, we need to register our vision plugin\n\n```\n await server.register(Vision);\n\n```\n\nor else our views won't work, we will just keep on getting errors, moreso, the Vision plugin gives us access to some API that we can use to render our template on the fly.\n\nOur project structure will change up a bit\n\n```\nHapi_Project\n|__node_modules\n|__server.js\n|__public\n|  |__ style.css\n|  |__ main.js\n|__views\n|  |__layouts\n|  |  |__layout.html\n|  |__partials\n|  |  |__navbar.html\n|  |__index.html\n|__ package.json\n\n```\n\nConfiguring our views.\n\n```\n  //setting up views\n  server.views({\n    engines: {\n      html: require(\"handlebars\"),\n    },\n    relativeTo: __dirname,\n    path: \"./views\",\n    partialsPath: \"./views/partials\",\n    layout: true,\n    layoutPath: \"./views/layouts\",\n  });\n\n```\n\nThe Hapi views method takes in an object where we pass in our various configurations, now let's go through them one after the other. The `engines` property is for setting the template engine of your choice which we used `handlebars` for. The `relativeTo` indicates the directory in which we are going to be serving our templates from and that is the `views` folder. `partialsPath` indicates the directory containing the our partial files, setting `layout` to true tells vision that we indeed want to use the layout templating style which you will see in the snippet below and also we need to provide the `layoutPath` which points to the directory we are serving the `layout.html` file from and it must be named `layout.html` else we get an error.\n\nInside the `layout.html` file, paste the following\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"../style.css\" />\n\n    <title>{{title}}</title>\n  </head>\n  <body>\n    {{> navbar.html}}\n    {{{content}}}\n  </body>\n</html>\n\n\n```\n\nwe are going to modify the `/views/index.html` as well\n\n```\n<div class=\"container\">\n  <h1>Introduction to Hapi.JS</h1>\n  <h3> A brief guide in the hapi world</h3>\n</div>\n\n```\n\nand also, we modify the `/views/partials/navbar.html` as well.\n\n```\n<nav>\n  <div>\n    <div class=\"brand\">Hapi Project</div>\n  </div>\n  <ul>\n    <li><a href=\"#\">home</a></li>\n    <li><a href=\"#\">about</a></li>\n    <li><a href=\"#\">service</a></li>\n    <li><a href=\"#\">contact</a></li>\n  </ul>\n</nav>\n\n```\n\nThe `HTML` code are limited because this is just an introductory post. Our `CSS` remains as the previous file we had from the first part of this post.\n\nWe can now render our view like so.\n\n```\n server.route([\n    {\n      method: \"GET\",\n      path: \"/\",\n      handler: (request, h) => {\n        return h.view(\"index\");\n      },\n    },\n    // other routes\n ])\n\n```\n\nIn your browser, you can now navigate to the `http://localhost:3000/` and see a similar output as this.\n\n![static.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1601600690265/1vU1OoKUr.png)\n\n### Serving Dynamic Data\n\nYou can also pass a variable or an array of object to your views and Handlebars will parse it dynamically to the views.\n\nLet's change up our `server.js` file a bit.\n\n```\nserver.route([\n    {\n      method: \"GET\",\n      path: \"/\",\n      handler: (request, h) => {\n        // Create an array of objects\n        const lists = [\n          {\n            name: \"Isiaka\",\n            age: 20,\n          },\n          {\n            name: \"Lukman\",\n            age: 22,\n          },\n          {\n            name: \"Bamidele\",\n            age: 25,\n          },\n          {\n            name: \"Dellyson\",\n            age: 28,\n          },\n        ];\n        return h.view(\"index\", {\n          title: \"Home Page\",\n          lists,\n        });\n      },\n    },\n    // other routes objects\n])\n\n\n```\n\nAnd our `index.html` file\n\n```\n<div class=\"container\">\n  <h1>Introduction to Hapi.JS</h1>\n  <h3>A brief guide in the hapi world</h3>\n  <br />\n  {{#if lists}}\n  <ul>\n    {{#each lists}}\n    <li>{{name}}</li>\n    {{/each}}\n  </ul>\n  {{/if}}\n</div>\n\n\n```\n\n![views.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1601767552541/yw0qw41B0.png)\n\n### Putting all together\n\n```\nconst Hapi = require(\"@hapi/hapi\");\nconst Port = process.env.PORT || 3000;\nconst Inert = require(\"@hapi/inert\");\nconst Vision = require(\"@hapi/vision\");\nconst Path = require(\"path\");\n// create a server config\nconst server = Hapi.server({\n  host: \"localhost\",\n  port: Port,\n  routes: {\n    files: {\n      relativeTo: Path.join(__dirname, \"public\"),\n    },\n  },\n});\n\nconst config = async () => {\n  await server.register(Inert);\n  await server.register(Vision);\n\n  //setting up views\n  server.views({\n    engines: {\n      html: require(\"handlebars\"),\n    },\n    relativeTo: __dirname,\n    path: \"./views\",\n    partialsPath: \"./views/partials\",\n    layout: true,\n    layoutPath: \"./views/layouts\",\n  });\n  // static file route\n  server.route({\n    method: \"GET\",\n    path: \"/{params*}\",\n    handler: {\n      directory: {\n        path: \".\",\n      },\n    },\n  });\n  server.route([\n    {\n      method: \"GET\",\n      path: \"/\",\n      handler: (request, h) => {\n        return h.view(\"index\");\n      },\n    },\n\n    {\n      method: \"GET\",\n      path: \"/re\",\n      handler: (request, h) => {\n        const name = request.query.name;\n        const age = request.query.age;\n        return {\n          name,\n          age,\n        };\n      },\n    },\n  ]);\n\n  await server.start();\n  console.log(\"Server listening on port \", server.info.uri);\n};\nconfig();\n// handling unhandledRejection Error\nprocess.on(\"unhandledRejection\", (err) => {\n  console.log(err);\n  process.exit(1);\n});\n\n\n\n```\n\n### Wrapping up\n\nWith this brief write-up, I am sure you've got a glimpse of how to add a view to an Hapi.js project, find the link to the project repo below. See you in my next post. Peace ‚úå.\n\n[Repo link](https://github.com/Dellysn/hapi_project.git)\n",
      "hasPolls": false,
      "totalPollVotes": 0,
      "upvotes": 0,
      "downvotes": 0,
      "tags": [
        "56744722958ef13879b94ffb",
        "56744721958ef13879b94dd2",
        "56744723958ef13879b955a9",
        "56744721958ef13879b94a86"
      ],
      "untaggedFrom": [],
      "upvotedBy": [],
      "downvotedBy": [],
      "popularity": 4293.8223,
      "responses": [],
      "responseCount": 0,
      "replyCount": 0,
      "followers": [],
      "isActive": true,
      "isFeatured": false,
      "isEngaging": false,
      "answeredByTarget": false,
      "inviters": [],
      "isDelisted": false,
      "isNotified": false,
      "duplicatePosts": [],
      "numCollapsed": 0,
      "hasReward": false,
      "bookmarkedIn": [],
      "similarPostIds": [],
      "reactions": [
        "5c090d96c2a9c2a674d35484",
        "5c090d96c2a9c2a674d35486",
        "567453d0b73d6a82ac8c5abd",
        "5c090d96c2a9c2a674d35485",
        "567453d0b73d6a82ac8c5abc",
        "567453d0b73d6a82ac8c5ab9"
      ],
      "totalReactions": 6,
      "reactionsByCurrentUser": [],
      "isPinnedToBlog": false,
      "disableComments": false,
      "commentsPaused": false,
      "hasLatex": false,
      "syncAlgolia": false,
      "enableToc": false,
      "toc": [],
      "numUniqueUsersWhoReacted": 0,
      "_id": "5f7f9aacaddab004867df90f",
      "title": "Add Views to your Hapi.js project with Vision",
      "type": "story",
      "ogImage": "",
      "isRepublished": false,
      "originalArticleURL": "",
      "partOfPublication": true,
      "publication": "5ee6c51f6c513725202e9e0e",
      "slug": "add-views-to-your-hapijs-project-with-vision",
      "importedFromMedium": false,
      "dateAdded": "2020-10-08T23:03:08.950Z",
      "hasCustomDate": false,
      "series": null,
      "pollOptions": [],
      "badges": [],
      "questionReplies": [],
      "contributors": [],
      "cuid": "ckg1ffn3e01oyw6s1fulpd7rt",
      "author": "5ee6c4e36c513725202e9e05",
      "followersCount": 1,
      "draft": "5f7688f1b7a1d82bf9b354be",
      "hasPinnedTag": false,
      "readTime": 7,
      "__v": 0,
      "reactionToCountMap": {
        "reaction_5c090d96c2a9c2a674d35484": 1,
        "reaction_5c090d96c2a9c2a674d35486": 1,
        "reaction_567453d0b73d6a82ac8c5abd": 1,
        "reaction_5c090d96c2a9c2a674d35485": 1,
        "reaction_567453d0b73d6a82ac8c5abc": 1,
        "reaction_567453d0b73d6a82ac8c5ab9": 1
      },
      "viewsUpdatedOn": 1643641204812,
      "uniqueReactions": [
        "5c090d96c2a9c2a674d35484",
        "5c090d96c2a9c2a674d35486",
        "567453d0b73d6a82ac8c5abd",
        "5c090d96c2a9c2a674d35485",
        "567453d0b73d6a82ac8c5abc",
        "567453d0b73d6a82ac8c5ab9"
      ],
      "reactionToCountMapUnique": {
        "reaction_5c090d96c2a9c2a674d35484": 1,
        "reaction_5c090d96c2a9c2a674d35486": 1,
        "reaction_567453d0b73d6a82ac8c5abd": 1,
        "reaction_5c090d96c2a9c2a674d35485": 1,
        "reaction_567453d0b73d6a82ac8c5abc": 1,
        "reaction_567453d0b73d6a82ac8c5ab9": 1
      },
      "id": "5f7f9aacaddab004867df90f"
    },
    {
      "reward": { "type": "xlm" },
      "sourcedFromGithub": false,
      "isAnonymous": false,
      "views": 24,
      "slugOverridden": false,
      "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1601425006972/m6gxSZIbC.jpeg",
      "autoGeneratedCover": "",
      "brief": "In recent times I was looking to change up a little bit and test my coding ability with another Node.js framework that is not Express, I have always used Express.js in many of my projects, in my search, I discovered Hapi.js and I am loving it already...",
      "content": "<p>In recent times I was looking to change up a little bit and test my coding ability with another Node.js framework that is not Express, I have always used Express.js in many of my projects, in my search, I discovered Hapi.js and I am loving it already currently using it in one of my projects, one thing I noticed is that most of the article, tutorials or blogpost on Hapi are outdated because I remembered how I struggle with some implementations it was only after I read the docs thoroughly I was then able to solve my problem.</p>\n<p>Hapi is a Node.js framework use in creating server-side web applications, it was <em>\"originally developed to handle Walmart‚Äôs Black Friday scale, Hapi continues to be the proven choice for enterprise-grade backend needs\"</em>, Hapi is known for its simplicity and security, and satisfaction. Hapi is very secured due to the fact that all the dependencies that can be used with Hapi are all from Hapi's own verified contributors.</p>\n<p>Hapi.js and Express.js have one thing in common and that is been very easy to set up, in less than ten minutes or less you are already running on the Hapi server, and migrating to Hapi from Express is very easy.</p>\n<p>In this tutorial, we are going to learn some basic Hapi concept and techniques and these are categorized as the following;</p>\n<ul>\n<li>Hapi setup</li>\n<li>Creating a basic server</li>\n<li>Adding routes</li>\n<li>Plugins</li>\n<li>Serving static files</li>\n</ul>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<p>Basic knowledge of Node.js and JavaScript is required.\nBasic knowledge of how to use the terminal.</p>\n<h3 id=\"the-setup\">The setup</h3>\n<p>Firstly, we'll create a folder to hold our project files together after which we will then initialize NPM to create a <code>package.json</code> file and then we can start installing our dependencies, I will be using <code>yarn</code> as my package manager, if you don't know what Yarn is, it's an alternative to <code>npm</code> package manager, instead of installing packages with <code>npm install</code>, it will be <code>yarn add</code>. You can read more about Yarn <a target=\"_blank\" href=\"https://yarnpkg.com/getting-started\">here</a>, it is pretty easy to use.</p>\n<p>Head up to your terminal, in your navigate to your projects folder,\n<code>mkdir hapi_project</code> to create a hapi_project folder, <code>cd hapi_project</code> to navigate to the new folder then <code>yarn init -y</code> to initializes a new package manager and create a <code>package.json</code> file in the project folder.</p>\n<p>Next up, we are going to install the dependencies we'll be needing for this tutorial.</p>\n<pre><code><span class=\"hljs-attribute\">yarn</span> add <span class=\"hljs-variable\">@hapi</span>/hapi  <span class=\"hljs-variable\">@hapi</span>/inert --save\n</code></pre><p>The command above install the necessary dependencies needed for our project, <code>@ hapi/hapi</code> is the main Hapi dependency, and <code>@hapi/inert</code> is for serving static files</p>\n<h3 id=\"setting-up-hapi-server\">Setting up Hapi Server</h3>\n<p>We will start by creating a server and this server will only return the \"Hello World\" text.\nFirst, create a <code>server.js</code> file in your project folder, copy and paste (I recommend you type them) the content below into the <code>server.js</code> file</p>\n<pre><code>  <span class=\"hljs-keyword\">const</span> Hapi = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@hapi/hapi\"</span>);\n  <span class=\"hljs-keyword\">const</span> Port = process.env.PORT || <span class=\"hljs-number\">3000</span>;\n\n  <span class=\"hljs-comment\">//create a server config</span>\n\n  <span class=\"hljs-keyword\">const</span> server = Hapi.server({\n    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">\"localhost\"</span>,\n    <span class=\"hljs-attr\">port</span>: Port,\n  });\n\n\n\n<span class=\"hljs-comment\">//other logic here</span>\n\n\n\n   <span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-keyword\">await</span> server.start();\n     <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Server listening on port \"</span>, server.info.uri);\n   };\n\n<span class=\"hljs-comment\">//start the server</span>\n   config()\n\n<span class=\"hljs-comment\">// handling unhandledRejection Error</span>\nprocess.on(<span class=\"hljs-string\">\"unhandledRejection\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(err);\n  process.exit(<span class=\"hljs-number\">1</span>);\n});\n</code></pre><p>In the first line, we require the Hapi dependency and also set the port on which our server will be listening on to the <code>Port</code> variable. In the next line, we created the server which takes in an object where we passed in our <code>port</code> and <code>host</code>, the config function whenever its called will run our server on the <code>port:3000</code>. The last line basically handles an <code>unhandledRejection</code> error and only gets called whenever the system detects one and also automatically quits the process.</p>\n<h3 id=\"adding-routes\">Adding Routes</h3>\n<p>Adding routes to our Hapi app is pretty straight forward</p>\n<pre><code><span class=\"hljs-keyword\">server</span>.route({\n  <span class=\"hljs-keyword\">method</span>: \"GET\",\n  <span class=\"hljs-type\">path</span>: \"/\",\n  <span class=\"hljs-keyword\">handler</span>: (request, h) =&gt; {\n    <span class=\"hljs-keyword\">return</span> \"hello world\";\n  },\n});\n</code></pre><p>The <code>server</code> function has a <code>route</code> properties which take in an object or array of an object or we can get more sophisticated and create another file which exports an array of object and then uses it as a route, these objects have three important properties which includes; <code>method</code> which denote the type of request we are making to the route, it can either be a <code>GET</code>, <code>POST</code>,<code>PUT</code>, and a <code>DELETE</code> request, the <code>path</code> property signifies the endpoints and a <code>handler</code> method. The <code>handler</code> is where we handle the main business logic that is, the incoming request and the response we are sending back to the user. The <code>handler</code> method takes in two arguments the <code>request</code> and <code>h</code> keyword respectively you can name them anything you want but I like to leave it like that to avoid getting myself confused, the <code>request</code> object contains some handful of properties, for instance, when you submit a form data to the server you can access it with <code>request.payload</code>, the data are available in the payload property of the <code>request object</code> and let's say you have parameters or queries available in your URL you can do </p>\n<pre><code><span class=\"hljs-comment\">// for parameters in the URL </span>\n\nrequest.<span class=\"hljs-keyword\">params</span>\n\n<span class=\"hljs-comment\">// for queries in the URL</span>\n\nrequest.query\n</code></pre><p>There are also lots more you can do with the request objects. The <code>h</code> object also contains some handful of response toolkit, for instance, you can return a view with the <code>h.view()</code> or a static file with the <code>h.file()</code> method, most importantly a <code>handler</code> method must return a value, promise, or an error using the <code>return</code> keyword. In the example above we only return and \"Hello World\" text,</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1601600382072/goJ8l4_kF.png\" alt=\"hello.png\" /></p>\n<p>We can also pass parameters to routes <code>http://localhost:3000/dellyson</code> we can grab the value of this parameter on the server with <code>request.params</code> like so</p>\n<pre><code> <span class=\"hljs-keyword\">server</span>.route({\n    <span class=\"hljs-keyword\">method</span>: \"GET\",\n    <span class=\"hljs-type\">path</span>: \"/{name}\",\n    <span class=\"hljs-keyword\">handler</span>: (request, h) =&gt; {\n      <span class=\"hljs-keyword\">return</span> request.params.name;\n    },\n  });\n</code></pre><p>You can as well pass in a query to your routes <code>http://localhost:3000?name=dellyson&amp;age=20</code> we can grab the values from queries like so on the server</p>\n<pre><code><span class=\"hljs-keyword\">server</span>.route({\n    <span class=\"hljs-keyword\">method</span>: \"GET\",\n    <span class=\"hljs-type\">path</span>: \"/re\",\n    <span class=\"hljs-keyword\">handler</span>: (request, h) =&gt; {\n      const <span class=\"hljs-type\">name</span> = request.query.name;\n      const age = request.query.age\n    <span class=\"hljs-keyword\">return</span> {\n             <span class=\"hljs-type\">name</span>, age  \n      }\n\n    },\n  });\n</code></pre><p>The above snippet returns a JSON response.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1601602831002/cgnuHpMRK.png\" alt=\"jsn.png\" /></p>\n<h3 id=\"registering-plugins\">Registering plugins</h3>\n<p>In Hapi, we have what we call plugins, you can think of plugins as express middlewares which we can use to handle some functions in our project but in Hapi we use plugins before you can use a plugin, you have to register it using <code>server.register(pluginName)</code>.</p>\n<h3 id=\"serving-static-files\">Serving static files</h3>\n<p>Serving static files is an important aspect in building our application, the only thing our server can return now is a text, if we try to return an HTML file we will definitely get an error, serving static files is not built into the core Hapi framework luckily we have a plugin for that <code>@hapi/inert</code>, <code>inert</code> brings the power of serving static files to Hapi, we have to register <code>inert</code> before we can use it in our code.</p>\n<p>Before diving into how to serve static files, let's alter our project structure a little bit:</p>\n<pre><code>Hapi_Project\n<span class=\"hljs-params\">|__ node_modules\n|</span>_<span class=\"hljs-number\">_</span> server.js\n<span class=\"hljs-params\">|__public\n|</span>  <span class=\"hljs-params\">|__ index.html\n|</span>  <span class=\"hljs-params\">|__ style.css\n|</span>  <span class=\"hljs-params\">|__ main.js\n|</span>_<span class=\"hljs-number\">_</span> package.json\n</code></pre><p>copy and paste this content into your <code>index.html</code> file</p>\n<pre><code><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"./style.css\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Intro - Hapi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Introduction to Hapi.Js<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>A brief guide into the Hapi world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./main.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>Also in your <code>style.css</code> file</p>\n<pre><code>* {\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background-color</span>: goldenrod;\n}\n<span class=\"hljs-selector-class\">.container</span> {\n  <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">56rem</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">2rem</span> auto;\n}\n</code></pre><p>We'll leave our <code>main.js</code> empty for now.</p>\n<p>Let us modify our <code>server.js</code> file. First, require <code>@hapi/inert</code>.</p>\n<pre><code><span class=\"hljs-keyword\">const</span> Inert  = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">\"@hapi/inert\"</span>)\n</code></pre><pre><code><span class=\"hljs-string\">const</span> <span class=\"hljs-string\">server</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">Hapi.server({</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">Port,</span>\n  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">\"localhost\"</span><span class=\"hljs-string\">,</span>\n  <span class=\"hljs-attr\">routes:</span> {\n    <span class=\"hljs-attr\">files:</span> {\n      <span class=\"hljs-attr\">relativeTo:</span> <span class=\"hljs-string\">Path.join(__dirname</span>, <span class=\"hljs-string\">\"public\"</span><span class=\"hljs-string\">)</span>,\n    },\n  }<span class=\"hljs-string\">,</span>\n<span class=\"hljs-string\">});</span>\n</code></pre><p>Take note of how I added a <code>routes</code> property to the <code>Hapi.server()</code> config what this does is that the <code>routes</code> property also takes in another property <code>files</code>, this <code>files</code> has its own property called <code>relativeTo</code> what this does is that it takes in the relative path to the directory that contains our static files. Note, this path will be relative, in this project, the folder containing all my static file is the public folder which is the reason why I set the value to <code>Path.join(__dirname, \"public\"),</code>. <code>Path</code> is a Node.js module\ninside the <code>config</code> function before the <code>server.start()</code>,</p>\n<pre><code><span class=\"hljs-keyword\">await</span> server.register(Inert)\n</code></pre><p>Now we can add the route we want the server to serve the static file from</p>\n<pre><code> <span class=\"hljs-comment\">// static file route</span>\n  <span class=\"hljs-selector-tag\">server</span><span class=\"hljs-selector-class\">.route</span>({\n    <span class=\"hljs-attribute\">method</span>: <span class=\"hljs-string\">\"GET\"</span>,\n    <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">\"/{params*}\"</span>,\n    <span class=\"hljs-attribute\">handler</span>: {\n      <span class=\"hljs-attribute\">directory</span>: {\n        <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">\".\"</span>,\n      },\n    },\n  });\n</code></pre><p>What the snippet above does is basically search for the <code>public</code> directly on every route and the directly passed into the <code>handler</code> method basically refers to the public directory, this is where the <code>Inert</code> plugin looks for files to serve. If you omit the <code>await server.register(Inert)</code> line, you will get an <code>unknown handler: directory</code> in the console.</p>\n<p>Now, let's modify our home route to render our HTML file.</p>\n<pre><code><span class=\"hljs-selector-tag\">server</span><span class=\"hljs-selector-class\">.route</span>({\n    <span class=\"hljs-attribute\">method</span>: <span class=\"hljs-string\">\"GET\"</span>,\n    path: <span class=\"hljs-string\">\"/\"</span>,\n    handler: (request, h) =&gt; {\n      return h.<span class=\"hljs-built_in\">file</span>(<span class=\"hljs-string\">\"./index.html\"</span>);\n    },\n  });\n</code></pre><p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1601600690265/1vU1OoKUr.png\" alt=\"static.png\" /></p>\n<h3 id=\"putting-it-all-together\">Putting it all together</h3>\n<pre><code><span class=\"hljs-keyword\">const</span> Hapi = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@hapi/hapi\"</span>);\n<span class=\"hljs-keyword\">const</span> Port = process.env.PORT || <span class=\"hljs-number\">3000</span>;\n<span class=\"hljs-keyword\">const</span> Inert = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@hapi/inert\"</span>);\n<span class=\"hljs-keyword\">const</span> Path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);\n<span class=\"hljs-comment\">// create a server config</span>\n<span class=\"hljs-keyword\">const</span> server = Hapi.server({\n  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">\"localhost\"</span>,\n  <span class=\"hljs-attr\">port</span>: Port,\n  <span class=\"hljs-attr\">routes</span>: {\n    <span class=\"hljs-attr\">files</span>: {\n      <span class=\"hljs-attr\">relativeTo</span>: Path.join(__dirname, <span class=\"hljs-string\">\"public\"</span>),\n    },\n  },\n});\n\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">await</span> server.register(Inert);\n   <span class=\"hljs-comment\">// static file route</span>\n  server.route({\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"GET\"</span>,\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/{params*}\"</span>,\n    <span class=\"hljs-attr\">handler</span>: {\n      <span class=\"hljs-attr\">directory</span>: {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\".\"</span>,\n      },\n    },\n  });\n  server.route([\n    {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"GET\"</span>,\n      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/\"</span>,\n      <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">request, h</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">return</span> h.file(<span class=\"hljs-string\">\"index.html\"</span>);\n      },\n    },\n\n    {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"GET\"</span>,\n      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/re\"</span>,\n      <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">request, h</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> name = request.query.name;\n        <span class=\"hljs-keyword\">const</span> age = request.query.age;\n        <span class=\"hljs-keyword\">return</span> {\n          name,\n          age,\n        };\n      },\n    },\n  ]);\n\n  <span class=\"hljs-keyword\">await</span> server.start();\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Server listening on port \"</span>, server.info.uri);\n};\nconfig();\n<span class=\"hljs-comment\">// handling unhandledRejection Error</span>\nprocess.on(<span class=\"hljs-string\">\"unhandledRejection\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(err);\n  process.exit(<span class=\"hljs-number\">1</span>);\n});\n</code></pre><h3 id=\"wrap-up\">Wrap up</h3>\n<p>There are many more things you can do with Hapi.js you are not just limited to the ones I have shown you, you can head over to <a target=\"_blank\" href=\"https://hapi.dev/api\">Hapi website</a>.\nFind the link to the project repo below. See you in my next post. Peace ‚úå.\n<a target=\"_blank\" href=\"https://github.com/Dellysn/hapi_project.git\">Repo link</a></p>\n",
      "contentMarkdown": "In recent times I was looking to change up a little bit and test my coding ability with another Node.js framework that is not Express, I have always used Express.js in many of my projects, in my search, I discovered Hapi.js and I am loving it already currently using it in one of my projects, one thing I noticed is that most of the article, tutorials or blogpost on Hapi are outdated because I remembered how I struggle with some implementations it was only after I read the docs thoroughly I was then able to solve my problem.\n\nHapi is a Node.js framework use in creating server-side web applications, it was *\"originally developed to handle Walmart‚Äôs Black Friday scale, Hapi continues to be the proven choice for enterprise-grade backend needs\"*, Hapi is known for its simplicity and security, and satisfaction. Hapi is very secured due to the fact that all the dependencies that can be used with Hapi are all from Hapi's own verified contributors.\n\nHapi.js and Express.js have one thing in common and that is been very easy to set up, in less than ten minutes or less you are already running on the Hapi server, and migrating to Hapi from Express is very easy.\n\nIn this tutorial, we are going to learn some basic Hapi concept and techniques and these are categorized as the following;\n\n- Hapi setup\n- Creating a basic server\n- Adding routes\n- Plugins\n- Serving static files\n\n### Prerequisites\n\nBasic knowledge of Node.js and JavaScript is required.\nBasic knowledge of how to use the terminal.\n\n\n### The setup\n\nFirstly, we'll create a folder to hold our project files together after which we will then initialize NPM to create a `package.json` file and then we can start installing our dependencies, I will be using `yarn` as my package manager, if you don't know what Yarn is, it's an alternative to `npm` package manager, instead of installing packages with `npm install`, it will be `yarn add`. You can read more about Yarn [here](https://yarnpkg.com/getting-started), it is pretty easy to use.\n\nHead up to your terminal, in your navigate to your projects folder,\n`mkdir hapi_project` to create a hapi_project folder, `cd hapi_project` to navigate to the new folder then `yarn init -y` to initializes a new package manager and create a `package.json` file in the project folder.\n\nNext up, we are going to install the dependencies we'll be needing for this tutorial.\n\n```\nyarn add @hapi/hapi  @hapi/inert --save\n\n```\nThe command above install the necessary dependencies needed for our project, `@ hapi/hapi` is the main Hapi dependency, and `@hapi/inert` is for serving static files\n\n### Setting up Hapi Server\n\nWe will start by creating a server and this server will only return the \"Hello World\" text.\nFirst, create a `server.js` file in your project folder, copy and paste (I recommend you type them) the content below into the `server.js` file\n\n\n```\n  const Hapi = require(\"@hapi/hapi\");\n  const Port = process.env.PORT || 3000;\n\n  //create a server config\n\n  const server = Hapi.server({\n    host: \"localhost\",\n    port: Port,\n  });\n\n\n\n//other logic here\n\n\n\n   const config = async () => {\n    await server.start();\n     console.log(\"Server listening on port \", server.info.uri);\n   };\n\n//start the server\n   config()\n\n// handling unhandledRejection Error\nprocess.on(\"unhandledRejection\", (err) => {\n  console.log(err);\n  process.exit(1);\n});\n\n\n``` \n\nIn the first line, we require the Hapi dependency and also set the port on which our server will be listening on to the `Port` variable. In the next line, we created the server which takes in an object where we passed in our `port` and `host`, the config function whenever its called will run our server on the `port:3000`. The last line basically handles an `unhandledRejection` error and only gets called whenever the system detects one and also automatically quits the process.\n\n### Adding Routes\n\nAdding routes to our Hapi app is pretty straight forward\n\n```\nserver.route({\n  method: \"GET\",\n  path: \"/\",\n  handler: (request, h) => {\n    return \"hello world\";\n  },\n});\n\n```\n\nThe `server` function has a `route` properties which take in an object or array of an object or we can get more sophisticated and create another file which exports an array of object and then uses it as a route, these objects have three important properties which includes; `method` which denote the type of request we are making to the route, it can either be a `GET`, `POST`,`PUT`, and a `DELETE` request, the `path` property signifies the endpoints and a `handler` method. The `handler` is where we handle the main business logic that is, the incoming request and the response we are sending back to the user. The `handler` method takes in two arguments the `request` and `h` keyword respectively you can name them anything you want but I like to leave it like that to avoid getting myself confused, the `request` object contains some handful of properties, for instance, when you submit a form data to the server you can access it with `request.payload`, the data are available in the payload property of the `request object` and let's say you have parameters or queries available in your URL you can do \n\n```\n// for parameters in the URL \n\nrequest.params\n\n// for queries in the URL\n\nrequest.query\n\n```\nThere are also lots more you can do with the request objects. The `h` object also contains some handful of response toolkit, for instance, you can return a view with the `h.view()` or a static file with the `h.file()` method, most importantly a `handler` method must return a value, promise, or an error using the `return` keyword. In the example above we only return and \"Hello World\" text,\n\n\n![hello.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1601600382072/goJ8l4_kF.png)\n\nWe can also pass parameters to routes `http://localhost:3000/dellyson` we can grab the value of this parameter on the server with `request.params` like so\n\n```\n server.route({\n    method: \"GET\",\n    path: \"/{name}\",\n    handler: (request, h) => {\n      return request.params.name;\n    },\n  });\n\n\n```\nYou can as well pass in a query to your routes `http://localhost:3000?name=dellyson&age=20` we can grab the values from queries like so on the server\n\n```\nserver.route({\n    method: \"GET\",\n    path: \"/re\",\n    handler: (request, h) => {\n      const name = request.query.name;\n      const age = request.query.age\n    return {\n             name, age  \n      }\n\n    },\n  });\n\n```\nThe above snippet returns a JSON response.\n\n\n![jsn.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1601602831002/cgnuHpMRK.png)\n\n### Registering plugins\n\nIn Hapi, we have what we call plugins, you can think of plugins as express middlewares which we can use to handle some functions in our project but in Hapi we use plugins before you can use a plugin, you have to register it using `server.register(pluginName)`.\n\n\n### Serving static files\n\nServing static files is an important aspect in building our application, the only thing our server can return now is a text, if we try to return an HTML file we will definitely get an error, serving static files is not built into the core Hapi framework luckily we have a plugin for that `@hapi/inert`, `inert` brings the power of serving static files to Hapi, we have to register `inert` before we can use it in our code.\n\nBefore diving into how to serve static files, let's alter our project structure a little bit:\n\n```\nHapi_Project\n|__ node_modules\n|__ server.js\n|__public\n|  |__ index.html\n|  |__ style.css\n|  |__ main.js\n|__ package.json\n\n```\n\ncopy and paste this content into your `index.html` file\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"./style.css\" />\n    <title>Intro - Hapi</title>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>Introduction to Hapi.Js</h1>\n      <h3>A brief guide into the Hapi world</h3>\n    </div>\n\n    <script src=\"./main.js\"></script>\n  </body>\n</html>\n\n\n```\n\nAlso in your `style.css` file\n\n```\n* {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  background-color: goldenrod;\n}\n.container {\n  max-width: 56rem;\n  margin: 2rem auto;\n}\n\n\n```\n\nWe'll leave our `main.js` empty for now.\n\nLet us modify our `server.js` file. First, require `@hapi/inert`.\n\n```\nconst Inert  = require(\"@hapi/inert\")\n```\n\n```\nconst server = Hapi.server({\n  port: Port,\n  host: \"localhost\",\n  routes: {\n    files: {\n      relativeTo: Path.join(__dirname, \"public\"),\n    },\n  },\n});\n```\n\nTake note of how I added a `routes` property to the `Hapi.server()` config what this does is that the `routes` property also takes in another property `files`, this `files` has its own property called `relativeTo` what this does is that it takes in the relative path to the directory that contains our static files. Note, this path will be relative, in this project, the folder containing all my static file is the public folder which is the reason why I set the value to ` Path.join(__dirname, \"public\"),`. `Path` is a Node.js module\ninside the `config` function before the `server.start()`,\n\n```\nawait server.register(Inert)\n\n```\n\nNow we can add the route we want the server to serve the static file from\n\n```\n // static file route\n  server.route({\n    method: \"GET\",\n    path: \"/{params*}\",\n    handler: {\n      directory: {\n        path: \".\",\n      },\n    },\n  });\n\n```\n\nWhat the snippet above does is basically search for the `public` directly on every route and the directly passed into the `handler` method basically refers to the public directory, this is where the `Inert` plugin looks for files to serve. If you omit the `await server.register(Inert)` line, you will get an `unknown handler: directory` in the console.\n\nNow, let's modify our home route to render our HTML file.\n\n```\nserver.route({\n    method: \"GET\",\n    path: \"/\",\n    handler: (request, h) => {\n      return h.file(\"./index.html\");\n    },\n  });\n\n```\n![static.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1601600690265/1vU1OoKUr.png)\n\n\n### Putting it all together\n\n```\nconst Hapi = require(\"@hapi/hapi\");\nconst Port = process.env.PORT || 3000;\nconst Inert = require(\"@hapi/inert\");\nconst Path = require(\"path\");\n// create a server config\nconst server = Hapi.server({\n  host: \"localhost\",\n  port: Port,\n  routes: {\n    files: {\n      relativeTo: Path.join(__dirname, \"public\"),\n    },\n  },\n});\n\nconst config = async () => {\n  await server.register(Inert);\n   // static file route\n  server.route({\n    method: \"GET\",\n    path: \"/{params*}\",\n    handler: {\n      directory: {\n        path: \".\",\n      },\n    },\n  });\n  server.route([\n    {\n      method: \"GET\",\n      path: \"/\",\n      handler: (request, h) => {\n        return h.file(\"index.html\");\n      },\n    },\n\n    {\n      method: \"GET\",\n      path: \"/re\",\n      handler: (request, h) => {\n        const name = request.query.name;\n        const age = request.query.age;\n        return {\n          name,\n          age,\n        };\n      },\n    },\n  ]);\n\n  await server.start();\n  console.log(\"Server listening on port \", server.info.uri);\n};\nconfig();\n// handling unhandledRejection Error\nprocess.on(\"unhandledRejection\", (err) => {\n  console.log(err);\n  process.exit(1);\n});\n\n```\n\n### Wrap up\n\nThere are many more things you can do with Hapi.js you are not just limited to the ones I have shown you, you can head over to [Hapi website](https://hapi.dev/api).\nFind the link to the project repo below. See you in my next post. Peace ‚úå.\n[Repo link](https://github.com/Dellysn/hapi_project.git)\n\n\n\n\n\n\n\n",
      "hasPolls": false,
      "totalPollVotes": 0,
      "upvotes": 0,
      "downvotes": 0,
      "tags": [
        "56744722958ef13879b94ffb",
        "56744721958ef13879b94dd2",
        "56744722958ef13879b950bd",
        "56744723958ef13879b955a9",
        "56744721958ef13879b948cc"
      ],
      "untaggedFrom": [],
      "upvotedBy": [],
      "downvotedBy": [],
      "popularity": 4292.0552,
      "responses": [],
      "responseCount": 0,
      "replyCount": 0,
      "followers": [],
      "isActive": true,
      "isFeatured": false,
      "isEngaging": false,
      "answeredByTarget": false,
      "inviters": [],
      "isDelisted": false,
      "isNotified": false,
      "duplicatePosts": [],
      "numCollapsed": 0,
      "hasReward": false,
      "bookmarkedIn": [],
      "similarPostIds": [],
      "reactions": [
        "5c090d96c2a9c2a674d35484",
        "567453d0b73d6a82ac8c5abd",
        "5c090d96c2a9c2a674d35485",
        "5c090d96c2a9c2a674d35486",
        "5c090d96c2a9c2a674d3548a",
        "5c090d96c2a9c2a674d35488",
        "567453d0b73d6a82ac8c5ab9"
      ],
      "totalReactions": 9,
      "reactionsByCurrentUser": [],
      "isPinnedToBlog": false,
      "disableComments": false,
      "commentsPaused": false,
      "hasLatex": false,
      "syncAlgolia": false,
      "enableToc": false,
      "toc": [],
      "numUniqueUsersWhoReacted": 0,
      "_id": "5f7e45183de96f77a17a1143",
      "title": "Introduction to Hapi.js",
      "type": "story",
      "ogImage": "",
      "isRepublished": false,
      "originalArticleURL": "",
      "partOfPublication": true,
      "publication": "5ee6c51f6c513725202e9e0e",
      "slug": "introduction-to-hapijs",
      "importedFromMedium": false,
      "dateAdded": "2020-10-07T22:45:44.090Z",
      "hasCustomDate": false,
      "series": null,
      "pollOptions": [],
      "badges": [],
      "questionReplies": [],
      "contributors": [],
      "cuid": "ckfzzde8x016dmps1g320h4ct",
      "author": "5ee6c4e36c513725202e9e05",
      "followersCount": 1,
      "draft": "5f637e9e0f115919981fd310",
      "hasPinnedTag": false,
      "readTime": 10,
      "__v": 0,
      "reactionToCountMap": {
        "reaction_5c090d96c2a9c2a674d35484": 2,
        "reaction_567453d0b73d6a82ac8c5abd": 2,
        "reaction_5c090d96c2a9c2a674d35485": 1,
        "reaction_5c090d96c2a9c2a674d35486": 1,
        "reaction_5c090d96c2a9c2a674d3548a": 1,
        "reaction_5c090d96c2a9c2a674d35488": 1,
        "reaction_567453d0b73d6a82ac8c5ab9": 1
      },
      "viewsUpdatedOn": 1643655607045,
      "uniqueReactions": [
        "5c090d96c2a9c2a674d35484",
        "567453d0b73d6a82ac8c5abd",
        "5c090d96c2a9c2a674d35485",
        "5c090d96c2a9c2a674d35486",
        "5c090d96c2a9c2a674d3548a",
        "5c090d96c2a9c2a674d35488",
        "567453d0b73d6a82ac8c5ab9"
      ],
      "reactionToCountMapUnique": {
        "reaction_5c090d96c2a9c2a674d35484": 2,
        "reaction_567453d0b73d6a82ac8c5abd": 2,
        "reaction_5c090d96c2a9c2a674d35485": 1,
        "reaction_5c090d96c2a9c2a674d35486": 1,
        "reaction_5c090d96c2a9c2a674d3548a": 1,
        "reaction_5c090d96c2a9c2a674d35488": 1,
        "reaction_567453d0b73d6a82ac8c5ab9": 1
      },
      "id": "5f7e45183de96f77a17a1143"
    },
    {
      "reward": { "type": "xlm" },
      "sourcedFromGithub": false,
      "isAnonymous": false,
      "views": 59,
      "slugOverridden": false,
      "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1600386597969/olaDEqQZh.png",
      "autoGeneratedCover": "",
      "brief": "Introduction\n\nIt took me six months to fully understand the concept of functions in JavaScript. You read that right.\n\nWhen I just started coding in javascript, I wrote a lot of shitty code as I was new to the programming world, I had a lot of documen...",
      "content": "<h1 id=\"introduction\">Introduction</h1>\n<blockquote>\n<p>It took me six months to fully understand the concept of functions in JavaScript. You read that right.</p>\n</blockquote>\n<p>When I just started coding in javascript, I wrote a lot of shitty code as I was new to the programming world, I had a lot of <code>document.getElementById()</code> and <code>document.querySelector()</code> everywhere in my code, no grouping, no splitting, no reusability, just throwing <code>console.log() and alert()</code> everywhere. As a beginner, this bothered me a lot and made me sought out new ways of writing codes in javascript, after watching some tutorials I got a new idea and a better way to group my codes.</p>\n<h3 id=\"functions\">Functions</h3>\n<blockquote>\n<p>As a concept in coding, it allows you to store a piece of code that does a single task inside a defined block, and then call that code whenever you need it using a single short command.\n<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions\">MDN Web Docs</a></p>\n</blockquote>\n<p>To get a clearer view of javascript function, let me use a farmer as an illustration; for a farmer to have full control over his cattle he/she build a fence around them to keep them together else the cattle will stray and looking for them is obviously a difficult task.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1600356755998/khqC0bsS_.png\" alt=\"cow.png\" /></p>\n<p>Image source: <a target=\"_blank\" href=\"https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fwww.alibaba.com%2Fproduct-detail%2Fgalvanized-cattle-fence-cow-farm-Cheap_60654140661.html&amp;psig=AOvVaw10HKDLOUOBqKfbtbFxMhv_&amp;ust=1600443042029000&amp;source=images&amp;cd=vfe&amp;ved=2ahUKEwj6h6aJwfDrAhWQDmMBHdJNAJ0QjRx6BAgAEAc\">Alibaba</a> </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1600357046869/RabDHKMdg.jpeg\" alt=\"cow2.jpg\" /></p>\n<p>Image source: <a target=\"_blank\" href=\"https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fwww.farmanddairy.com%2Fnews%2Fan-invisible-fence-for-cattle%2F561069.html&amp;psig=AOvVaw1KkU23P_M8LSsvF2wCKEmF&amp;ust=1600442905511000&amp;source=images&amp;cd=vfe&amp;ved=0CAIQjRxqFwoTCOiL5czA8OsCFQAAAAAdAAAAABAJ\">Farm and Diary</a> </p>\n<p>A javascript function is a block of code that performs a specific task when they are called.</p>\n<p>for more clearer picture:</p>\n<pre><code>  <span class=\"hljs-comment\">//instead of doing this</span>\n\n   <span class=\"hljs-keyword\">let</span> digits = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>];\n     <span class=\"hljs-keyword\">const</span> sum = digits.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>)</span>{\n     <span class=\"hljs-keyword\">return</span> n*<span class=\"hljs-number\">2</span>\n    })\n   <span class=\"hljs-built_in\">console</span>.log(sum)\n\n  <span class=\"hljs-comment\">//output:[2,4,6,8,10,12]</span>\n</code></pre><p>The code above will run correctly but the way it's left out in the open is actually not a good practice, its variable is globally scoped which can later land us in big trouble as the codebase grows.\nTo prevent such thing from happening we can use javascript function to build a block around our code and our variable can be scoped to locally to the function.</p>\n<pre><code> <span class=\"hljs-comment\">//do this</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doubleThaNumbers</span>(<span class=\"hljs-params\"></span>)</span>{\n       <span class=\"hljs-keyword\">const</span> digits = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>];\n       <span class=\"hljs-keyword\">const</span> sum = digits.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>)</span>{\n       <span class=\"hljs-keyword\">return</span> n*<span class=\"hljs-number\">2</span>\n    })\n    <span class=\"hljs-built_in\">console</span>.log(sum)\n  }\n\n   <span class=\"hljs-comment\">//output:[2,4,6,8,10,12]</span>\n</code></pre><p>the code above doubles the number in the array and logs it in the console</p>\n<h2 id=\"two-ways-you-can-create-functions-in-javascript\">Two ways you can create functions in javascript</h2>\n<h3 id=\"function-declaration\">Function Declaration</h3>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hello</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-comment\">// logics here</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello World\"</span>)\n}\n\n<span class=\"hljs-comment\">// output: Hello World</span>\n</code></pre><h3 id=\"function-expression\">Function Expression</h3>\n<pre><code><span class=\"hljs-keyword\">const</span> hello = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-comment\">// logic here</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello World\"</span>)\n}\n<span class=\"hljs-comment\">// output: Hello World</span>\n</code></pre><h2 id=\"calling-functions\">Calling functions</h2>\n<p>After creating a javascript function,  you need to call it before it can run</p>\n<pre><code><span class=\"hljs-selector-tag\">hello</span>()\n</code></pre><p>This function prints \"Hello World\"  in the browser's console.</p>\n<h2 id=\"parameters-and-arguments\">Parameters and Arguments</h2>\n<p>When creating a function, we can pass a placeholder for incoming data that is to be processed in the function, this placeholder is called a parameter, and when calling a function the value that is being passed into the function is called <em>function arguments</em>\nyou can call a function with parameters and pass in an argument as shown below;</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hello</span> (<span class=\"hljs-params\">name, age</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello! My name is \"</span> + name+ <span class=\"hljs-string\">\" and I am \"</span>+age+<span class=\"hljs-string\">\" years old\"</span>)\n}\n\n<span class=\"hljs-comment\">// calling the function</span>\n\nhello(<span class=\"hljs-string\">\"Dellyson\"</span>, <span class=\"hljs-number\">21</span>)\n\n<span class=\"hljs-comment\">//output: \"Hello!, my name is Dellyson and I am 21 years old\"</span>\n</code></pre><h4 id=\"what-happens-if-some-of-the-arguments-are-missing\">What happens if some of the arguments are missing?</h4>\n<p>When calling the function above, If I pass in only one argument the second argument will automatically be assigned an <strong>undefined</strong> value.</p>\n<p>For example:</p>\n<pre><code><span class=\"hljs-selector-tag\">hello</span>(<span class=\"hljs-string\">\"Dellyson\"</span>)\n\n<span class=\"hljs-comment\">//output: \"Hello!, my name is Dellyson and I am undefined years old\"</span>\n</code></pre><p>This can be handled by setting a default value for the parameters.</p>\n<pre><code>   <span class=\"hljs-keyword\">function</span> hello(<span class=\"hljs-type\">name</span>, age=\"default age\"){\n\n       console.log(\"Hello! My name is \" + <span class=\"hljs-type\">name</span>+ \" and I am \"+age+\" years old\")\n\n   }\n\n// output:\"Hello!, my name is Dellyson and I am default age years old\"\n</code></pre><p>When writing javascript codes if all you do just like I used to is writing <code>document.getElementById()</code> everywhere without using functions as a fence around your code, someday you will run into some errors that will take you nights to debug.</p>\n<p>Javascript function gives some advantages which include:</p>\n<ul>\n<li>Code reusability.</li>\n<li>Keeping a bunch of code together in a function block</li>\n<li>Helps you write an easy to debug code</li>\n<li>Keeps your codebase organized</li>\n</ul>\n<p>Writing reusable code is a life-saving practice, you don't want to have a duplicate of any line of your code everywhere in your codebase.</p>\n<p>For example:</p>\n<pre><code><span class=\"hljs-comment\">// instead of doing this every time</span>\n\n<span class=\"hljs-keyword\">const</span> submitBtn  = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"#btn\"</span>)\n<span class=\"hljs-keyword\">const</span> toggleBtn = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"#toggleBtn\"</span>)\n</code></pre><p>The lines of code above have some repetition which is against the DRY (Don't Repeat Yourself) principle.\nyou can create a function that takes an element as a parameter and return the selected element using the <code>return</code> keyword.</p>\n<p>Example:</p>\n<pre><code><span class=\"hljs-comment\">// do this</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getById</span>(<span class=\"hljs-params\"> element</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">document</span>.getElementById(element);\n}\n</code></pre><p>In the code above, I basically created a <code>getById()</code>  function which  takes in a parameter of <code>element</code>, all this function does is to return a selected element  <code>return document.getElementById(element)</code>, we can now use the function like so;</p>\n<pre><code><span class=\"hljs-comment\">// use it </span>\n<span class=\"hljs-keyword\">const</span> submitBtn = getById(<span class=\"hljs-string\">\"btn\"</span>);\n<span class=\"hljs-keyword\">const</span> toggleBtn = getById(<span class=\"hljs-string\">\"toggleBtn\"</span>);\n\nbtn.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello World!\"</span>)\n})\n<span class=\"hljs-comment\">//output: \"Hello World!\"</span>\n\ntoggleBtn.addEventListener(<span class=\"hljs-string\">\"dblclick\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"double clicked!!!\"</span>)\n})\n\n<span class=\"hljs-comment\">//output:\"double clicked!!!\"</span>\n</code></pre><h1 id=\"conclusion\">Conclusion</h1>\n<p>With the help of a javascript function and parameter, I was able to create a basic reusable code that I can call anywhere and anytime I want.\nSee you in my next post. Peace ‚úå.</p>\n",
      "contentMarkdown": "# Introduction\n\n> It took me six months to fully understand the concept of functions in JavaScript. You read that right.\n\nWhen I just started coding in javascript, I wrote a lot of shitty code as I was new to the programming world, I had a lot of `document.getElementById()` and `document.querySelector()` everywhere in my code, no grouping, no splitting, no reusability, just throwing `console.log() and alert()` everywhere. As a beginner, this bothered me a lot and made me sought out new ways of writing codes in javascript, after watching some tutorials I got a new idea and a better way to group my codes.\n\n### Functions\n> As a concept in coding, it allows you to store a piece of code that does a single task inside a defined block, and then call that code whenever you need it using a single short command.\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions)\n\nTo get a clearer view of javascript function, let me use a farmer as an illustration; for a farmer to have full control over his cattle he/she build a fence around them to keep them together else the cattle will stray and looking for them is obviously a difficult task.\n \n\n![cow.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1600356755998/khqC0bsS_.png)\n\nImage source: [Alibaba](https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.alibaba.com%2Fproduct-detail%2Fgalvanized-cattle-fence-cow-farm-Cheap_60654140661.html&psig=AOvVaw10HKDLOUOBqKfbtbFxMhv_&ust=1600443042029000&source=images&cd=vfe&ved=2ahUKEwj6h6aJwfDrAhWQDmMBHdJNAJ0QjRx6BAgAEAc) \n\n![cow2.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1600357046869/RabDHKMdg.jpeg)\n\nImage source: [Farm and Diary](https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.farmanddairy.com%2Fnews%2Fan-invisible-fence-for-cattle%2F561069.html&psig=AOvVaw1KkU23P_M8LSsvF2wCKEmF&ust=1600442905511000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCOiL5czA8OsCFQAAAAAdAAAAABAJ) \n\n\nA javascript function is a block of code that performs a specific task when they are called.\n\nfor more clearer picture:\n\n\n```\n  //instead of doing this\n\n   let digits = [1,2,3,4,5,6];\n     const sum = digits.map(function(n){\n     return n*2\n    })\n   console.log(sum)\n\n  //output:[2,4,6,8,10,12]\n\n``` \n\nThe code above will run correctly but the way it's left out in the open is actually not a good practice, its variable is globally scoped which can later land us in big trouble as the codebase grows.\nTo prevent such thing from happening we can use javascript function to build a block around our code and our variable can be scoped to locally to the function.\n\n```\n //do this\n    function doubleThaNumbers(){\n       const digits = [1,2,3,4,5,6];\n       const sum = digits.map(function(n){\n       return n*2\n    })\n    console.log(sum)\n  }\n   \n   //output:[2,4,6,8,10,12]\n\n``` \nthe code above doubles the number in the array and logs it in the console\n\n\n## Two ways you can create functions in javascript \n\n### Function Declaration\n\n\n```\nfunction hello() {\n// logics here\nconsole.log(\"Hello World\")\n}\n\n// output: Hello World\n``` \n\n\n### Function Expression\n\n\n```\nconst hello = function () {\n// logic here\nconsole.log(\"Hello World\")\n}\n// output: Hello World\n``` \n\n\n## Calling functions\n\nAfter creating a javascript function,  you need to call it before it can run\n\n\n```\nhello()\n\n``` \nThis function prints \"Hello World\"  in the browser's console.\n\n## Parameters and Arguments\n\nWhen creating a function, we can pass a placeholder for incoming data that is to be processed in the function, this placeholder is called a parameter, and when calling a function the value that is being passed into the function is called _function arguments_\nyou can call a function with parameters and pass in an argument as shown below;\n\n```\nfunction hello (name, age){\n    console.log(\"Hello! My name is \" + name+ \" and I am \"+age+\" years old\")\n}\n\n// calling the function\n\nhello(\"Dellyson\", 21)\n\n//output: \"Hello!, my name is Dellyson and I am 21 years old\"\n\n``` \n\n#### What happens if some of the arguments are missing?\n\nWhen calling the function above, If I pass in only one argument the second argument will automatically be assigned an **undefined** value.\n\nFor example:\n\n```\nhello(\"Dellyson\")\n\n//output: \"Hello!, my name is Dellyson and I am undefined years old\"\n\n```\n\nThis can be handled by setting a default value for the parameters.\n\n```\n   function hello(name, age=\"default age\"){\n\n       console.log(\"Hello! My name is \" + name+ \" and I am \"+age+\" years old\")\n\n   }\n\n// output:\"Hello!, my name is Dellyson and I am default age years old\"\n\n\n```\n\nWhen writing javascript codes if all you do just like I used to is writing `document.getElementById()` everywhere without using functions as a fence around your code, someday you will run into some errors that will take you nights to debug.\n\nJavascript function gives some advantages which include:\n\n- Code reusability.\n- Keeping a bunch of code together in a function block\n- Helps you write an easy to debug code\n- Keeps your codebase organized\n\nWriting reusable code is a life-saving practice, you don't want to have a duplicate of any line of your code everywhere in your codebase.\n\nFor example:\n\n```\n// instead of doing this every time\n\nconst submitBtn  = document.getElementById(\"#btn\")\nconst toggleBtn = document.getElementById(\"#toggleBtn\")\n\n``` \nThe lines of code above have some repetition which is against the DRY (Don't Repeat Yourself) principle.\nyou can create a function that takes an element as a parameter and return the selected element using the `return` keyword.\n\nExample:\n\n```\n// do this\n\nfunction getById( element) {\n    return document.getElementById(element);\n}\n\n``` \n\nIn the code above, I basically created a `getById()`  function which  takes in a parameter of `element`, all this function does is to return a selected element  `return document.getElementById(element)`, we can now use the function like so;\n\n\n```\n// use it \nconst submitBtn = getById(\"btn\");\nconst toggleBtn = getById(\"toggleBtn\");\n\nbtn.addEventListener(\"click\", function(){\nconsole.log(\"Hello World!\")\n})\n//output: \"Hello World!\"\n\ntoggleBtn.addEventListener(\"dblclick\", function() {\n  console.log(\"double clicked!!!\")\n})\n\n//output:\"double clicked!!!\"\n``` \n\n# Conclusion \n\nWith the help of a javascript function and parameter, I was able to create a basic reusable code that I can call anywhere and anytime I want.\nSee you in my next post. Peace ‚úå.\n\n\n\n\n\n\n\n\n\n\n",
      "hasPolls": false,
      "totalPollVotes": 0,
      "upvotes": 0,
      "downvotes": 0,
      "tags": ["56744721958ef13879b94cad", "56744723958ef13879b955a9"],
      "untaggedFrom": [],
      "upvotedBy": [],
      "downvotedBy": [],
      "popularity": 4276.6023,
      "responses": [
        {
          "popularity": 4296.0459,
          "isActive": true,
          "upvotedBy": [],
          "downvotedBy": [],
          "upvotes": 0,
          "downvotes": 0,
          "isCollapsed": false,
          "totalBadgesAwarded": 0,
          "isRewardWinner": false,
          "bookmarkedIn": [],
          "score": 0,
          "reactions": [],
          "totalReactions": 0,
          "reactionsByCurrentUser": [],
          "_id": "5f81aa527762251b305d90ef",
          "content": "<p>Thanks for writing this Isiaka. It&#39;s rather helpful, conceptually speaking.</p>\n",
          "contentMarkdown": "Thanks for writing this Isiaka. It's rather helpful, conceptually speaking.",
          "author": "5f7b1dc3e93896601dd289f0",
          "stamp": "ckg3nutka030ydcs138xufpv3",
          "post": "5f73c7b6f955ec0a130f6bc9",
          "replies": [],
          "dateAdded": "2020-10-10T12:34:26.987Z",
          "badgesAwarded": [],
          "__v": 0
        },
        {
          "popularity": 4276.818,
          "isActive": true,
          "upvotedBy": [],
          "downvotedBy": [],
          "upvotes": 0,
          "downvotes": 0,
          "isCollapsed": false,
          "totalBadgesAwarded": 0,
          "isRewardWinner": false,
          "bookmarkedIn": [],
          "score": 0,
          "reactions": [],
          "totalReactions": 0,
          "reactionsByCurrentUser": [],
          "_id": "5f747668ea384a1be3c684a1",
          "content": "<p>Great post. I love the idea of cows and fences - I have a feeling I&#39;m going to be picturing those cows in their fence every time I write a function now haha!</p>\n",
          "contentMarkdown": "Great post. I love the idea of cows and fences - I have a feeling I'm going to be picturing those cows in their fence every time I write a function now haha!",
          "author": "5f4fb3da98ae9829ac3da2f0",
          "stamp": "ckfpcpbyx008qibs10g0f9chh",
          "post": "5f73c7b6f955ec0a130f6bc9",
          "replies": [],
          "dateAdded": "2020-09-30T12:13:28.667Z",
          "badgesAwarded": [],
          "__v": 0
        },
        {
          "popularity": 4275.8667,
          "isActive": true,
          "upvotedBy": [],
          "downvotedBy": [],
          "upvotes": 0,
          "downvotes": 0,
          "isCollapsed": false,
          "totalBadgesAwarded": 0,
          "isRewardWinner": false,
          "bookmarkedIn": [],
          "score": 0,
          "reactions": [],
          "totalReactions": 0,
          "reactionsByCurrentUser": [],
          "_id": "5f73cf32f955ec0a130f6bf8",
          "content": "<p>Awesome explanation, but I think you made a mistake here :</p>\n<blockquote>\n<p>the code above doubles the number in the array and logs it in the console. . . </p>\n</blockquote>\n<p>Here is how variable <code>sum</code> will be logged</p>\n<pre><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doubleThaNumbers</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">const</span> digits = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>];\n    <span class=\"hljs-keyword\">const</span> sum = digits.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>)</span>{\n                  <span class=\"hljs-keyword\">return</span> n*<span class=\"hljs-number\">2</span>\n                })\n    <span class=\"hljs-built_in\">console</span>.log(sum)\n }\n\ndoubleThaNumbers()\n</code></pre>",
          "contentMarkdown": "Awesome explanation, but I think you made a mistake here :\n> the code above doubles the number in the array and logs it in the console. . . \n\nHere is how variable `sum` will be logged\n```\n function doubleThaNumbers(){\n    const digits = [1,2,3,4,5,6];\n    const sum = digits.map(function(n){\n                  return n*2\n                })\n    (sum)\n }\n    \ndoubleThaNumbers()\n```",
          "author": "5f133dd0a1826244e3d83237",
          "stamp": "ckfon7u8003lzzns1ghs0fpb9",
          "post": "5f73c7b6f955ec0a130f6bc9",
          "replies": [],
          "dateAdded": "2020-09-30T00:20:02.113Z",
          "badgesAwarded": [],
          "__v": 0
        }
      ],
      "responseCount": 3,
      "replyCount": 4,
      "followers": [],
      "isActive": true,
      "isFeatured": false,
      "isEngaging": false,
      "answeredByTarget": false,
      "inviters": [],
      "isDelisted": false,
      "isNotified": false,
      "duplicatePosts": [],
      "numCollapsed": 0,
      "hasReward": false,
      "bookmarkedIn": [],
      "similarPostIds": [],
      "reactions": [
        "5c090d96c2a9c2a674d35484",
        "567453d0b73d6a82ac8c5abd",
        "567453d0b73d6a82ac8c5abc",
        "567453d0b73d6a82ac8c5ab9"
      ],
      "totalReactions": 6,
      "reactionsByCurrentUser": [],
      "isPinnedToBlog": false,
      "disableComments": false,
      "commentsPaused": false,
      "hasLatex": false,
      "syncAlgolia": false,
      "enableToc": false,
      "toc": [],
      "numUniqueUsersWhoReacted": 0,
      "_id": "5f73c7b6f955ec0a130f6bc9",
      "title": "What exactly is a function in JavaScript?",
      "type": "story",
      "ogImage": "",
      "isRepublished": false,
      "originalArticleURL": "",
      "partOfPublication": true,
      "publication": "5ee6c51f6c513725202e9e0e",
      "slug": "what-exactly-is-a-function-in-javascript",
      "importedFromMedium": false,
      "dateAdded": "2020-09-29T23:48:06.617Z",
      "hasCustomDate": false,
      "series": null,
      "pollOptions": [],
      "questionReplies": [],
      "contributors": [
        {
          "_id": "5f81aa527762251b305d90f0",
          "user": "5f7b1dc3e93896601dd289f0",
          "stamp": "ckg3nutka030ydcs138xufpv3"
        },
        {
          "_id": "5f747668ea384a1be3c684a2",
          "user": "5f4fb3da98ae9829ac3da2f0",
          "stamp": "ckfpcpbyx008qibs10g0f9chh"
        },
        {
          "_id": "5f73cf32f955ec0a130f6bf9",
          "user": "5f133dd0a1826244e3d83237",
          "stamp": "ckfon7u8003lzzns1ghs0fpb9"
        }
      ],
      "cuid": "ckfom2sif03k1zns1fvl0buu6",
      "author": "5ee6c4e36c513725202e9e05",
      "followersCount": 1,
      "draft": "5f61e846dc74720d9b85ed55",
      "hasPinnedTag": false,
      "readTime": 5,
      "__v": 3,
      "reactionToCountMap": {
        "reaction_5c090d96c2a9c2a674d35484": 1,
        "reaction_567453d0b73d6a82ac8c5abd": 3,
        "reaction_567453d0b73d6a82ac8c5abc": 1,
        "reaction_567453d0b73d6a82ac8c5ab9": 1
      },
      "lastActivity": "2020-10-10T13:20:10.911Z",
      "badges": [],
      "dateUpdated": "2020-09-30T13:14:15.491Z",
      "pendingPublicationApproval": false,
      "viewsUpdatedOn": 1642896006879,
      "uniqueReactions": [
        "5c090d96c2a9c2a674d35484",
        "567453d0b73d6a82ac8c5abd",
        "567453d0b73d6a82ac8c5abc",
        "567453d0b73d6a82ac8c5ab9"
      ],
      "reactionToCountMapUnique": {
        "reaction_5c090d96c2a9c2a674d35484": 1,
        "reaction_567453d0b73d6a82ac8c5abd": 3,
        "reaction_567453d0b73d6a82ac8c5abc": 1,
        "reaction_567453d0b73d6a82ac8c5ab9": 1
      },
      "id": "5f73c7b6f955ec0a130f6bc9"
    },
    {
      "reward": { "type": "xlm" },
      "sourcedFromGithub": false,
      "isAnonymous": false,
      "views": 55,
      "slugOverridden": false,
      "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1592183139441/3wNraqSS8.png",
      "autoGeneratedCover": "",
      "brief": "This article was originally written and posted on Lucid Blog by me you can check it out  here . \nThis is a repost with some editing.\nIn this tutorial, we will be learning two Git techniques called branching and merging. I will be showing you the basi...",
      "content": "<p>This article was originally written and posted on Lucid Blog by me you can check it out  <a target='_blank' rel='noopener noreferrer'  href=\"https://lucid.blog/dellyson/post/useful-git-techniques-branching-and-merging-d43\">here </a>. \nThis is a repost with some editing.</p>\n<p>In this tutorial, we will be learning two Git techniques called branching and merging. I will be showing you the basics of how to work with Git which includes creating and merging branches this also includes how to switch back and forth between the new branch and the default one, so let&#39;s get started.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>You will need the following tools to follow this tutorial:</p>\n<ul>\n<li>Git -  download  <a target='_blank' rel='noopener noreferrer'  href=\"https://git-scm.com/downloads\">here</a> .</li>\n<li>A GitHub account  - create one <a target='_blank' rel='noopener noreferrer'  href=\"https://github.com/\">here</a>.</li>\n<li>A text editor - preferably VSCODE.</li>\n<li>Basic knowledge of how to use the command line.</li>\n</ul>\n<p>Let&#39;s get started.</p>\n<p><strong>Step one A:</strong></p>\n<p>Create a project folder  in your root directory  with the  CMD prompt using the command below </p>\n<pre><code><span class=\"hljs-attribute\">mkdir</span> git_branching_and_merging_tutorial\n</code></pre><p>the command above will create a named folder in your root directory, navigate to the folder using</p>\n<pre><code><span class=\"hljs-built_in\">cd</span> git_branching_and_merging_tutorial\n</code></pre><p><strong>Step one B:</strong></p>\n<p>Create a markdown file in the folder to experiment with type the following command in your CMD (e.g README.md)</p>\n<pre><code><span class=\"hljs-selector-tag\">touch</span> <span class=\"hljs-selector-tag\">README</span><span class=\"hljs-selector-class\">.md</span>\n</code></pre><p>type in some random text in the .md file just to experiment with.\nInitialize git in the current folder using  </p>\n<pre><code>git <span class=\"hljs-keyword\">init</span>\n</code></pre><p>run  <code>git add .</code> to add all changes in the file.</p>\n<p>commit your first changes by running the command below</p>\n<pre><code>git <span class=\"hljs-keyword\">commit</span> -<span class=\"hljs-keyword\">m</span> <span class=\"hljs-string\">\"initial commit\"</span>\n</code></pre><p><strong>Step one C:</strong></p>\n<p>Log in to GitHub and create a new repository with the name of your choice. In the process, you should see a page like the one below.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1592954864504/VHZ5ezWkm.png\" alt=\"repo_instruction.png\"> </p>\n<p>The picture above contains instructions on how to create a new repository on your command line and how to do that manually by importing an existing repository to the website but I prefer doing the whole process on the command line because why not.</p>\n<p>Now let&#39;s go back to the terminal and do the  following:</p>\n<pre><code><span class=\"hljs-attribute\">git</span> remote add origin {<span class=\"hljs-attribute\">repository</span> link without the parenthesis}\n</code></pre><p>push to your Github repository by using the command below</p>\n<pre><code><span class=\"hljs-attribute\">git</span> push -u origin master\n</code></pre><p>just in case you are wondering how we come about the master in the above command, the master branch is the default branch name on GitHub.</p>\n<p><strong>Step two: CREATING BRANCHES</strong></p>\n<pre><code>git branch <span class=\"hljs-_\">-a</span>\n</code></pre><p>To check for already existing branches (the -a flag means all) or run <code>git branch --all</code> instead.</p>\n<p><strong>Step Three:</strong></p>\n<p>To create a new branch </p>\n<pre><code><span class=\"hljs-attribute\">git</span> branch development\n</code></pre><p>I named the new branch &quot;development&quot; for simplicity.</p>\n<p><strong>Step Four:</strong></p>\n<p>To switch to the new branch,</p>\n<pre><code><span class=\"hljs-attribute\">git</span> checkout development\n</code></pre><p>add some more random contents, add your changes with \n<code>git add .</code> and commit your changes with <code>git commit -m &quot;updated README&quot;</code>.</p>\n<p>Push to the development branch using </p>\n<pre><code><span class=\"hljs-attribute\">git</span> push -u origin development\n</code></pre><p>switch back to the default branch using the same command above but this time with the default branch name (master).</p>\n<p><strong>Step Five: MERGING BRANCHES</strong></p>\n<p><strong>Note:</strong> The example shown here assumes that you are working on a project own by you if you are working on a project with a team pushing directly to the master branch or the default branch can cause code conflicts in the project,  the best thing to do, is to push to the development or whatever name the team chooses, create a pull request (PR)  and wait for the PR to be merged by the authorized team member.</p>\n<p>Let go ahead with our &quot;mini-project&quot;.</p>\n<p>To merge branches, I assumed you have two branches created from following the steps above, you have the master branch and the development branch, to merge the two branches.</p>\n<p>Let&#39;s say you are sure that there are no conflicts in your file(s) and you want to merge the development branch with the master branch, do the followings;</p>\n<p>i. switch to the master branch with the command we use above <code>git checkout master</code></p>\n<p>ii.</p>\n<pre><code><span class=\"hljs-attribute\">git</span> pull\n</code></pre><p>to make sure the branch is updated with your project repository on GitHub.</p>\n<p>iii.</p>\n<pre><code><span class=\"hljs-attribute\">git</span> merge development\n</code></pre><p>Voila! This command will merge the development branch with the master branch, your master branch is now updated with the contents of your development branch, run <code>git push -u origin master</code> to update your project repository on GitHub or better still, you can compare and create a pull request which can also be merged by you in the browser.\nGo back to the GitHub repository to confirm, you should see an end result as the image below, your repository now has two branches with updated contents.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1592959350415/8B-m3yUOC.png\" alt=\"repo_instruction_2.png\"></p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>That&#39;s it for now, in this tutorial you learned how to create and merge branches which is a helpful skill when collaborating with other developers to work on a project.</p>\n",
      "contentMarkdown": "This article was originally written and posted on Lucid Blog by me you can check it out  [here ](https://lucid.blog/dellyson/post/useful-git-techniques-branching-and-merging-d43). \nThis is a repost with some editing.\n\nIn this tutorial, we will be learning two Git techniques called branching and merging. I will be showing you the basics of how to work with Git which includes creating and merging branches this also includes how to switch back and forth between the new branch and the default one, so let's get started.\n\n## Prerequisites \nYou will need the following tools to follow this tutorial:\n- Git -  download  [here](https://git-scm.com/downloads) .\n- A GitHub account  - create one [here](https://github.com/).\n-  A text editor - preferably VSCODE.\n- Basic knowledge of how to use the command line.\n\nLet's get started.\n\n**Step one A:**\n\nCreate a project folder  in your root directory  with the  CMD prompt using the command below \n```\nmkdir git_branching_and_merging_tutorial\n``` \nthe command above will create a named folder in your root directory, navigate to the folder using\n```\ncd git_branching_and_merging_tutorial\n```\n**Step one B:**\n\nCreate a markdown file in the folder to experiment with type the following command in your CMD (e.g README.md)\n```\ntouch README.md\n```\ntype in some random text in the .md file just to experiment with.\nInitialize git in the current folder using  \n```\ngit init\n```\nrun  ``` git add . ``` to add all changes in the file.\n\ncommit your first changes by running the command below\n\n ```\ngit commit -m \"initial commit\"\n```\n\n**Step one C:**\n\nLog in to GitHub and create a new repository with the name of your choice. In the process, you should see a page like the one below.\n\n![repo_instruction.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1592954864504/VHZ5ezWkm.png) \n\nThe picture above contains instructions on how to create a new repository on your command line and how to do that manually by importing an existing repository to the website but I prefer doing the whole process on the command line because why not.\n\nNow let's go back to the terminal and do the  following:\n ```\ngit remote add origin {repository link without the parenthesis}\n```\npush to your Github repository by using the command below\n```\ngit push -u origin master\n```\njust in case you are wondering how we come about the master in the above command, the master branch is the default branch name on GitHub.\n\n**Step two: CREATING BRANCHES**\n```\ngit branch -a\n```\nTo check for already existing branches (the -a flag means all) or run `git branch --all` instead.\n\n**Step Three:**\n\nTo create a new branch \n```\ngit branch development\n```\nI named the new branch \"development\" for simplicity.\n\n**Step Four:**\n\nTo switch to the new branch,\n\n```\ngit checkout development\n```\nadd some more random contents, add your changes with \n` git add . ` and commit your changes with `git commit -m \"updated README\" `.\n\nPush to the development branch using \n```\ngit push -u origin development\n```\nswitch back to the default branch using the same command above but this time with the default branch name (master).\n\n**Step Five: MERGING BRANCHES**\n\n**Note:** The example shown here assumes that you are working on a project own by you if you are working on a project with a team pushing directly to the master branch or the default branch can cause code conflicts in the project,  the best thing to do, is to push to the development or whatever name the team chooses, create a pull request (PR)  and wait for the PR to be merged by the authorized team member.\n\nLet go ahead with our \"mini-project\".\n\nTo merge branches, I assumed you have two branches created from following the steps above, you have the master branch and the development branch, to merge the two branches.\n\nLet's say you are sure that there are no conflicts in your file(s) and you want to merge the development branch with the master branch, do the followings;\n\ni. switch to the master branch with the command we use above `git checkout master`\n\nii.\n ```\ngit pull \n``` \nto make sure the branch is updated with your project repository on GitHub.\n\niii.\n ```\ngit merge development\n``` \nVoila! This command will merge the development branch with the master branch, your master branch is now updated with the contents of your development branch, run `git push -u origin master` to update your project repository on GitHub or better still, you can compare and create a pull request which can also be merged by you in the browser.\nGo back to the GitHub repository to confirm, you should see an end result as the image below, your repository now has two branches with updated contents.\n\n![repo_instruction_2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1592959350415/8B-m3yUOC.png)\n\n## Conclusion\n\nThat's it for now, in this tutorial you learned how to create and merge branches which is a helpful skill when collaborating with other developers to work on a project.\n",
      "hasPolls": false,
      "totalPollVotes": 0,
      "upvotes": 0,
      "downvotes": 0,
      "tags": [
        "56744723958ef13879b9526c",
        "56744721958ef13879b94c63",
        "56744723958ef13879b955a9",
        "56744722958ef13879b9506b"
      ],
      "untaggedFrom": [],
      "upvotedBy": [],
      "downvotedBy": [],
      "popularity": 4091.9145,
      "responses": [],
      "responseCount": 0,
      "replyCount": 0,
      "followers": [],
      "isActive": true,
      "isFeatured": false,
      "isEngaging": false,
      "answeredByTarget": false,
      "inviters": [],
      "isDelisted": false,
      "isNotified": false,
      "duplicatePosts": [],
      "numCollapsed": 0,
      "hasReward": false,
      "bookmarkedIn": [],
      "similarPostIds": [
        "5cdec8106c99a77b4957a1a8",
        "5f017bf53e04c67dd1bfbc25",
        "5d2695fae6aff6d931ad1f34",
        "58cbbaa7c3bad5e2e0c59d32",
        "5d7f70b2b45dd59f380e63c5",
        "5cbe94890fcfc550339af884",
        "597ae8b79010ca611055c871",
        "5ea06e5f0135fc417662a04b",
        "5ece51df123fdcb70b931552",
        "5eb9cbd54a6b9627679b4033",
        "5ed7d26fe6da1cf54d5e2ee2",
        "5e536991205a551d167ee0ed",
        "5a331abb9798f76d301583fc",
        "5eb66cd72845fa2f3923de76",
        "59969fa5687292df4b217dba",
        "5ad5357dc02d03a52d06495c",
        "5e3d7945cfe3a2f323d52628",
        "5ebae902dd088d056735eb2d",
        "5eadf29256f74a57140ff6dd",
        "5e9102e9c492833a1752e140",
        "5cd5d771cef6100072216d7b",
        "5ecc2d90957247ce0a4eaf03",
        "5eb54d932e13ca6903219c20",
        "5f009075afcbe9749a65a495",
        "5d9f91c4c3932095010c012f",
        "5e96950da12c7e6a1a6ae72c",
        "5ef67fc46b6e267ae80cc916",
        "5da1ef74c749c77361675c14",
        "5e1a32a132d5fad159b68c3b",
        "5ec541976bace2452f98e856"
      ],
      "reactions": [
        "5c090d96c2a9c2a674d35488",
        "5c090d96c2a9c2a674d35484",
        "5c090d96c2a9c2a674d35485",
        "567453d0b73d6a82ac8c5abd",
        "567453d0b73d6a82ac8c5abc",
        "567453d0b73d6a82ac8c5ab9",
        "5c090d96c2a9c2a674d3548b",
        "5c090d96c2a9c2a674d3548a",
        "5d9dd859f31791c942dc5b52"
      ],
      "totalReactions": 9,
      "reactionsByCurrentUser": [],
      "isPinnedToBlog": false,
      "disableComments": false,
      "commentsPaused": false,
      "hasLatex": false,
      "syncAlgolia": false,
      "enableToc": false,
      "toc": [],
      "numUniqueUsersWhoReacted": 0,
      "_id": "5ef4d81c7eed166741a22d6d",
      "title": "How to create and merge branches using Git and Github.",
      "type": "story",
      "isRepublished": true,
      "originalArticleURL": "https://lucid.blog/dellyson/post/useful-git-techniques-branching-and-merging-d43",
      "partOfPublication": true,
      "publication": "5ee6c51f6c513725202e9e0e",
      "slug": "how-to-create-and-merge-branches-using-git-and-github",
      "cuid": "ckbv18foz0054e9s1d36a3ynp",
      "importedFromMedium": false,
      "dateAdded": "2020-06-25T17:00:12.172Z",
      "hasCustomDate": false,
      "series": null,
      "pollOptions": [],
      "questionReplies": [],
      "contributors": [],
      "author": "5ee6c4e36c513725202e9e05",
      "followersCount": 1,
      "draft": "5ee6c8e06c513725202e9e53",
      "hasPinnedTag": false,
      "readTime": 4,
      "__v": 0,
      "reactionToCountMap": {
        "reaction_5c090d96c2a9c2a674d35488": 2,
        "reaction_5c090d96c2a9c2a674d35484": 1,
        "reaction_5c090d96c2a9c2a674d35486": -1,
        "reaction_5c090d96c2a9c2a674d35485": 1,
        "reaction_567453d0b73d6a82ac8c5abd": 1,
        "reaction_567453d0b73d6a82ac8c5abc": 1,
        "reaction_567453d0b73d6a82ac8c5ab9": 1,
        "reaction_5c090d96c2a9c2a674d3548b": 1,
        "reaction_5c090d96c2a9c2a674d3548a": 1,
        "reaction_5d9dd859f31791c942dc5b52": 1
      },
      "viewsUpdatedOn": 1642896006879,
      "badges": [],
      "uniqueReactions": [
        "5c090d96c2a9c2a674d35488",
        "5c090d96c2a9c2a674d35484",
        "5c090d96c2a9c2a674d35485",
        "567453d0b73d6a82ac8c5abd",
        "567453d0b73d6a82ac8c5abc",
        "567453d0b73d6a82ac8c5ab9",
        "5c090d96c2a9c2a674d3548b",
        "5c090d96c2a9c2a674d3548a",
        "5d9dd859f31791c942dc5b52"
      ],
      "reactionToCountMapUnique": {
        "reaction_5c090d96c2a9c2a674d35488": 2,
        "reaction_5c090d96c2a9c2a674d35484": 1,
        "reaction_5c090d96c2a9c2a674d35486": -1,
        "reaction_5c090d96c2a9c2a674d35485": 1,
        "reaction_567453d0b73d6a82ac8c5abd": 1,
        "reaction_567453d0b73d6a82ac8c5abc": 1,
        "reaction_567453d0b73d6a82ac8c5ab9": 1,
        "reaction_5c090d96c2a9c2a674d3548b": 1,
        "reaction_5c090d96c2a9c2a674d3548a": 1,
        "reaction_5d9dd859f31791c942dc5b52": 1
      },
      "id": "5ef4d81c7eed166741a22d6d"
    }
  ]
}
